[{"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/backend/bindings/node/index.ts":"1","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/backend/bindings/node/rollup.config.js":"2","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/backend/bindings/node/scripts/build.js":"3","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/backend/bindings/node/test/index.js":"4","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/desktop/App.svelte":"5","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/desktop/electron/lib/Ledger.js":"6","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/desktop/electron/lib/aboutPreload.js":"7","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/desktop/electron/lib/appUpdater.js":"8","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/desktop/electron/lib/deepLinkManager.js":"9","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/desktop/electron/lib/errorPreload.js":"10","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/desktop/electron/lib/kdbx.js":"11","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/desktop/electron/lib/keychain.js":"12","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/desktop/electron/lib/menu.js":"13","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/desktop/electron/lib/menuState.js":"14","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/desktop/electron/lib/notificationManager.js":"15","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/desktop/electron/lib/pincodeManager.js":"16","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/desktop/electron/main.js":"17","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/desktop/electron/preload.js":"18","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/desktop/index.js":"19","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/desktop/lib/helpers.ts":"20","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/desktop/postcss.config.js":"21","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/desktop/scripts/notarize.macos.js":"22","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/desktop/webpack.config.js":"23","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/mobile/App.svelte":"24","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/mobile/lib/api.ts":"25","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/mobile/lib/empty.ts":"26","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/mobile/main.js":"27","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/mobile/postcss.config.js":"28","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/mobile/rollup.config.js":"29","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/AccountTile.svelte":"30","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/ActivityDetail.svelte":"31","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/ActivityRow.svelte":"32","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/Animation.svelte":"33","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/BalanceSummary.svelte":"34","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/Box.svelte":"35","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/BundleMiningLayout.svelte":"36","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/Button.svelte":"37","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/ButtonCheckbox.svelte":"38","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/ButtonRadio.svelte":"39","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/DashboardPane.svelte":"40","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/Error.svelte":"41","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/HR.svelte":"42","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/Idle.svelte":"43","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/Illustration.svelte":"44","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/Link.svelte":"45","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/Logo.svelte":"46","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/OnboardingLayout.svelte":"47","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/Profile.svelte":"48","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/ProgressBar.svelte":"49","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/ProgressFlow.svelte":"50","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/QR.svelte":"51","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/RecoveryPhrase.svelte":"52","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/Route.svelte":"53","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/Scroller.svelte":"54","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/SecurityTile.svelte":"55","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/SettingsMenu.svelte":"56","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/SettingsNavigator.svelte":"57","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/Sidebar.svelte":"58","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/SpentAddress.svelte":"59","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/Spinner.svelte":"60","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/Text.svelte":"61","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/TitleBar.svelte":"62","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/Toast.svelte":"63","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/ToastContainer.svelte":"64","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/Tooltip.svelte":"65","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/TransactionItem.svelte":"66","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/Transition.svelte":"67","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/Video.svelte":"68","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/charts/Bar.svelte":"69","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/charts/Index.svelte":"70","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/charts/Line.svelte":"71","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/charts/defaults.js":"72","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/icon/Index.svelte":"73","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/icon/icons.js":"74","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/index.js":"75","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/inputs/Address.svelte":"76","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/inputs/Amount.svelte":"77","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/inputs/Checkbox.svelte":"78","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/inputs/Dropdown.svelte":"79","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/inputs/Dropzone.svelte":"80","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/inputs/ImportTextfield.svelte":"81","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/inputs/Input.svelte":"82","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/inputs/Number.svelte":"83","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/inputs/Password.svelte":"84","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/inputs/Pin.svelte":"85","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/inputs/Radio.svelte":"86","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/inputs/Toggle.svelte":"87","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/modals/AccountActions.svelte":"88","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/modals/Modal.svelte":"89","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/modals/NetworkIndicator.svelte":"90","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/modals/ProfileActions.svelte":"91","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/modals/index.js":"92","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/popups/AddNode.svelte":"93","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/popups/AddressHistory.svelte":"94","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/popups/Backup.svelte":"95","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/popups/BalanceFinder.svelte":"96","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/popups/Busy.svelte":"97","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/popups/DeleteAccount.svelte":"98","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/popups/DeleteProfile.svelte":"99","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/popups/Diagnostics.svelte":"100","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/popups/ErrorLog.svelte":"101","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/popups/HideAccount.svelte":"102","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/popups/Index.svelte":"103","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/popups/LedgerAddress.svelte":"104","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/popups/LedgerAppGuide.svelte":"105","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/popups/LedgerConfirmation.svelte":"106","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/popups/LedgerConnectionGuide.svelte":"107","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/popups/LedgerLegacyTransaction.svelte":"108","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/popups/LedgerMigrateIndex.svelte":"109","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/popups/LedgerNotConnected.svelte":"110","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/popups/LedgerTransaction.svelte":"111","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/popups/MissingBundle.svelte":"112","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/popups/Password.svelte":"113","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/popups/QR.svelte":"114","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/popups/RemoveNode.svelte":"115","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/popups/RiskFunds.svelte":"116","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/popups/Snapshot.svelte":"117","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/popups/Transaction.svelte":"118","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/popups/Version.svelte":"119","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/popups/Video.svelte":"120","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/actions.ts":"121","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/app.ts":"122","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/appSettings.ts":"123","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/appUpdater.ts":"124","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/bech32.ts":"125","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/chart.ts":"126","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/currency.ts":"127","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/deepLinking.ts":"128","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/electron.ts":"129","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/errors.ts":"130","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/helpers.ts":"131","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/i18n.ts":"132","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/ledger.ts":"133","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/market.ts":"134","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/migration.ts":"135","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/network.ts":"136","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/networkStatus.ts":"137","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/notifications.ts":"138","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/password.ts":"139","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/popup.ts":"140","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/profile.ts":"141","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/router.ts":"142","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/shell/errorLogger.ts":"143","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/shell/walletApi.ts":"144","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/shell/walletErrors.ts":"145","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/typings/account.ts":"146","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/typings/address.ts":"147","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/typings/app.ts":"148","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/typings/bridge.ts":"149","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/typings/chart.ts":"150","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/typings/client.ts":"151","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/typings/currency.ts":"152","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/typings/error.ts":"153","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/typings/events.ts":"154","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/typings/i18n.ts":"155","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/typings/icons.ts":"156","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/typings/index.ts":"157","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/typings/ledger.ts":"158","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/typings/market.ts":"159","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/typings/message.ts":"160","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/typings/migration.ts":"161","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/typings/mnemonic.ts":"162","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/typings/network.ts":"163","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/typings/node.ts":"164","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/typings/notification.ts":"165","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/typings/profile.ts":"166","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/typings/routes.ts":"167","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/typings/utils.ts":"168","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/typings/validator.ts":"169","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/typings/wallet.ts":"170","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/units.ts":"171","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/utils.ts":"172","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/validator.ts":"173","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/wallet.ts":"174","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/wordlists/english.ts":"175","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/Splash.svelte":"176","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/dashboard/Dashboard.svelte":"177","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/dashboard/settings/Settings.svelte":"178","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/dashboard/settings/views/Advanced.svelte":"179","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/dashboard/settings/views/General.svelte":"180","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/dashboard/settings/views/Help.svelte":"181","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/dashboard/settings/views/Security.svelte":"182","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/dashboard/settings/views/SettingsHome.svelte":"183","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/dashboard/settings/views/SettingsViewer.svelte":"184","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/dashboard/settings/views/index.js":"185","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/dashboard/wallet/Wallet.svelte":"186","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/dashboard/wallet/views/Account.svelte":"187","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/dashboard/wallet/views/AccountActions.svelte":"188","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/dashboard/wallet/views/AccountBalance.svelte":"189","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/dashboard/wallet/views/AccountHistory.svelte":"190","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/dashboard/wallet/views/AccountNavigation.svelte":"191","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/dashboard/wallet/views/BarChart.svelte":"192","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/dashboard/wallet/views/CreateAccount.svelte":"193","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/dashboard/wallet/views/LineChart.svelte":"194","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/dashboard/wallet/views/ManageAccount.svelte":"195","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/dashboard/wallet/views/Receive.svelte":"196","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/dashboard/wallet/views/Security.svelte":"197","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/dashboard/wallet/views/Send.svelte":"198","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/dashboard/wallet/views/WalletActions.svelte":"199","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/dashboard/wallet/views/WalletBalance.svelte":"200","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/dashboard/wallet/views/WalletHistory.svelte":"201","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/dashboard/wallet/views/index.js":"202","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/index.js":"203","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/login/Login.svelte":"204","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/login/views/EnterPin.svelte":"205","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/login/views/SelectProfile.svelte":"206","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/login/views/index.js":"207","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/Appearance.svelte":"208","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/Balance.svelte":"209","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/Congratulations.svelte":"210","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/Create.svelte":"211","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/Legal.svelte":"212","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/Password.svelte":"213","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/Profile.svelte":"214","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/Secure.svelte":"215","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/Setup.svelte":"216","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/Welcome.svelte":"217","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/backup/Backup.svelte":"218","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/backup/views/Backup.svelte":"219","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/backup/views/BackupToFile.svelte":"220","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/backup/views/RecoveryPhrase.svelte":"221","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/backup/views/VerifyRecoveryPhrase.svelte":"222","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/backup/views/index.js":"223","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/import/Import.svelte":"224","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/import/views/BackupPassword.svelte":"225","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/import/views/FileImport.svelte":"226","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/import/views/Import.svelte":"227","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/import/views/Ledger.svelte":"228","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/import/views/Success.svelte":"229","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/import/views/TextImport.svelte":"230","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/import/views/index.js":"231","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/ledger/Ledger.svelte":"232","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/ledger/views/AccountIndex.svelte":"233","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/ledger/views/Connect.svelte":"234","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/ledger/views/GenerateNewAddress.svelte":"235","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/ledger/views/InstallationGuide.svelte":"236","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/ledger/views/LegacyIntro.svelte":"237","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/ledger/views/RestoreFromLedger.svelte":"238","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/ledger/views/SwitchApps.svelte":"239","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/ledger/views/index.js":"240","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/migrate/Migrate.svelte":"241","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/migrate/views/BundleMiningWarning.svelte":"242","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/migrate/views/Migrate.svelte":"243","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/migrate/views/SecureSpentAddresses.svelte":"244","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/migrate/views/SecuringSpentAddresses.svelte":"245","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/migrate/views/SecurityCheckCompleted.svelte":"246","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/migrate/views/TransferFragmentedFunds.svelte":"247","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/migrate/views/index.js":"248","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/protect/Protect.svelte":"249","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/protect/views/Pin.svelte":"250","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/protect/views/Protect.svelte":"251","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/protect/views/RepeatPin.svelte":"252","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/protect/views/index.js":"253","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/tailwind.config.js":"254"},{"size":17007,"mtime":1631325592673,"results":"255","hashOfConfig":"256"},{"size":1061,"mtime":1631322977185,"results":"257","hashOfConfig":"256"},{"size":368,"mtime":1631322977185,"results":"258","hashOfConfig":"256"},{"size":5140,"mtime":1631322977186,"results":"259","hashOfConfig":"256"},{"size":9367,"mtime":1631322977190,"results":"260","hashOfConfig":"256"},{"size":5130,"mtime":1631322977191,"results":"261","hashOfConfig":"256"},{"size":529,"mtime":1631322977191,"results":"262","hashOfConfig":"256"},{"size":2799,"mtime":1631322977192,"results":"263","hashOfConfig":"256"},{"size":243,"mtime":1630073184617,"results":"264","hashOfConfig":"256"},{"size":632,"mtime":1631322977192,"results":"265","hashOfConfig":"256"},{"size":2230,"mtime":1631322977192,"results":"266","hashOfConfig":"256"},{"size":1280,"mtime":1630602585491,"results":"267","hashOfConfig":"268"},{"size":8272,"mtime":1631322977193,"results":"269","hashOfConfig":"256"},{"size":1039,"mtime":1631322977193,"results":"270","hashOfConfig":"256"},{"size":520,"mtime":1631322977193,"results":"271","hashOfConfig":"256"},{"size":1022,"mtime":1631322977194,"results":"272","hashOfConfig":"256"},{"size":16922,"mtime":1631322977402,"results":"273","hashOfConfig":"256"},{"size":12517,"mtime":1631322977194,"results":"274","hashOfConfig":"256"},{"size":792,"mtime":1631322977195,"results":"275","hashOfConfig":"256"},{"size":1703,"mtime":1631322977195,"results":"276","hashOfConfig":"256"},{"size":681,"mtime":1631322977197,"results":"277","hashOfConfig":"256"},{"size":855,"mtime":1631322977198,"results":"278","hashOfConfig":"256"},{"size":4562,"mtime":1631322977199,"results":"279","hashOfConfig":"256"},{"size":4272,"mtime":1631322977200,"results":"280","hashOfConfig":"256"},{"size":4724,"mtime":1631322977201,"results":"281","hashOfConfig":"256"},{"size":0,"mtime":1630073184656,"results":"282","hashOfConfig":"256"},{"size":119,"mtime":1631322977203,"results":"283","hashOfConfig":"256"},{"size":108,"mtime":1631322977204,"results":"284","hashOfConfig":"256"},{"size":2786,"mtime":1631322977204,"results":"285","hashOfConfig":"256"},{"size":1923,"mtime":1631322977224,"results":"286","hashOfConfig":"256"},{"size":9192,"mtime":1631322977225,"results":"287","hashOfConfig":"256"},{"size":6440,"mtime":1631322977226,"results":"288","hashOfConfig":"256"},{"size":6729,"mtime":1631322977226,"results":"289","hashOfConfig":"256"},{"size":1142,"mtime":1630073184706,"results":"290","hashOfConfig":"256"},{"size":304,"mtime":1630073184706,"results":"291","hashOfConfig":"256"},{"size":951,"mtime":1631322977227,"results":"292","hashOfConfig":"256"},{"size":12479,"mtime":1631322977227,"results":"293","hashOfConfig":"256"},{"size":975,"mtime":1631198648000,"results":"294","hashOfConfig":"256"},{"size":966,"mtime":1630073184707,"results":"295","hashOfConfig":"256"},{"size":519,"mtime":1631322977228,"results":"296","hashOfConfig":"256"},{"size":264,"mtime":1631322977228,"results":"297","hashOfConfig":"256"},{"size":226,"mtime":1630073184708,"results":"298","hashOfConfig":"256"},{"size":1169,"mtime":1631322977229,"results":"299","hashOfConfig":"256"},{"size":2686,"mtime":1631322977229,"results":"300","hashOfConfig":"256"},{"size":769,"mtime":1631322977229,"results":"301","hashOfConfig":"256"},{"size":1107,"mtime":1630602585614,"results":"302","hashOfConfig":"256"},{"size":2835,"mtime":1631322977230,"results":"303","hashOfConfig":"256"},{"size":1884,"mtime":1631322977230,"results":"304","hashOfConfig":"256"},{"size":1666,"mtime":1631322977231,"results":"305","hashOfConfig":"256"},{"size":3272,"mtime":1631322977231,"results":"306","hashOfConfig":"256"},{"size":1208,"mtime":1630073184710,"results":"307","hashOfConfig":"256"},{"size":1388,"mtime":1630073184710,"results":"308","hashOfConfig":"256"},{"size":361,"mtime":1630073184711,"results":"309","hashOfConfig":"256"},{"size":1345,"mtime":1630073184711,"results":"310","hashOfConfig":"256"},{"size":1978,"mtime":1631322977232,"results":"311","hashOfConfig":"256"},{"size":1318,"mtime":1631322977232,"results":"312","hashOfConfig":"256"},{"size":1892,"mtime":1631322977232,"results":"313","hashOfConfig":"256"},{"size":2760,"mtime":1631322977233,"results":"314","hashOfConfig":"256"},{"size":5304,"mtime":1631322977233,"results":"315","hashOfConfig":"256"},{"size":506,"mtime":1630073184712,"results":"316","hashOfConfig":"256"},{"size":3297,"mtime":1631322977234,"results":"317","hashOfConfig":"256"},{"size":5772,"mtime":1631211001783,"results":"318","hashOfConfig":"256"},{"size":2911,"mtime":1631322977234,"results":"319","hashOfConfig":"256"},{"size":929,"mtime":1631322977234,"results":"320","hashOfConfig":"256"},{"size":1927,"mtime":1631322977235,"results":"321","hashOfConfig":"256"},{"size":3314,"mtime":1631322977235,"results":"322","hashOfConfig":"256"},{"size":261,"mtime":1630073184714,"results":"323","hashOfConfig":"256"},{"size":1277,"mtime":1631322977236,"results":"324","hashOfConfig":"256"},{"size":7685,"mtime":1631322977237,"results":"325","hashOfConfig":"256"},{"size":732,"mtime":1631133674469,"results":"326","hashOfConfig":"256"},{"size":5631,"mtime":1631322977237,"results":"327","hashOfConfig":"256"},{"size":358,"mtime":1630073184715,"results":"328","hashOfConfig":"256"},{"size":2826,"mtime":1631322977237,"results":"329","hashOfConfig":"256"},{"size":72292,"mtime":1631322977239,"results":"330","hashOfConfig":"256"},{"size":3397,"mtime":1631322977239,"results":"331","hashOfConfig":"256"},{"size":2874,"mtime":1630073184717,"results":"332","hashOfConfig":"256"},{"size":6674,"mtime":1631322977240,"results":"333","hashOfConfig":"256"},{"size":1201,"mtime":1631198648005,"results":"334","hashOfConfig":"256"},{"size":7732,"mtime":1631322977240,"results":"335","hashOfConfig":"256"},{"size":3563,"mtime":1631322977241,"results":"336","hashOfConfig":"256"},{"size":4775,"mtime":1631322977241,"results":"337","hashOfConfig":"256"},{"size":7578,"mtime":1631322977242,"results":"338","hashOfConfig":"256"},{"size":2304,"mtime":1631322977242,"results":"339","hashOfConfig":"256"},{"size":2702,"mtime":1631322977242,"results":"340","hashOfConfig":"256"},{"size":6742,"mtime":1631322977243,"results":"341","hashOfConfig":"256"},{"size":1176,"mtime":1631198648008,"results":"342","hashOfConfig":"256"},{"size":683,"mtime":1631322977243,"results":"343","hashOfConfig":"256"},{"size":5188,"mtime":1631322977244,"results":"344","hashOfConfig":"256"},{"size":1104,"mtime":1630073184721,"results":"345","hashOfConfig":"256"},{"size":2123,"mtime":1631322977244,"results":"346","hashOfConfig":"256"},{"size":2300,"mtime":1631322977244,"results":"347","hashOfConfig":"256"},{"size":268,"mtime":1630073184722,"results":"348","hashOfConfig":"256"},{"size":2822,"mtime":1631322977245,"results":"349","hashOfConfig":"256"},{"size":1800,"mtime":1631322977245,"results":"350","hashOfConfig":"256"},{"size":4588,"mtime":1631322977245,"results":"351","hashOfConfig":"256"},{"size":3654,"mtime":1631322977246,"results":"352","hashOfConfig":"256"},{"size":397,"mtime":1631322977246,"results":"353","hashOfConfig":"256"},{"size":2889,"mtime":1631322977247,"results":"354","hashOfConfig":"256"},{"size":3631,"mtime":1631322977247,"results":"355","hashOfConfig":"256"},{"size":1927,"mtime":1631322977248,"results":"356","hashOfConfig":"256"},{"size":1706,"mtime":1631322977248,"results":"357","hashOfConfig":"256"},{"size":4551,"mtime":1631322977248,"results":"358","hashOfConfig":"256"},{"size":5880,"mtime":1631322977249,"results":"359","hashOfConfig":"256"},{"size":1481,"mtime":1631322977249,"results":"360","hashOfConfig":"256"},{"size":2289,"mtime":1631322977250,"results":"361","hashOfConfig":"256"},{"size":447,"mtime":1631322977250,"results":"362","hashOfConfig":"256"},{"size":2789,"mtime":1631322977250,"results":"363","hashOfConfig":"256"},{"size":2442,"mtime":1631322977250,"results":"364","hashOfConfig":"256"},{"size":1096,"mtime":1631322977251,"results":"365","hashOfConfig":"256"},{"size":1389,"mtime":1631322977251,"results":"366","hashOfConfig":"256"},{"size":3768,"mtime":1631322977251,"results":"367","hashOfConfig":"256"},{"size":1061,"mtime":1631322977252,"results":"368","hashOfConfig":"256"},{"size":2044,"mtime":1631322977252,"results":"369","hashOfConfig":"256"},{"size":330,"mtime":1631322977252,"results":"370","hashOfConfig":"256"},{"size":871,"mtime":1631322977253,"results":"371","hashOfConfig":"256"},{"size":808,"mtime":1631322977253,"results":"372","hashOfConfig":"256"},{"size":637,"mtime":1631322977253,"results":"373","hashOfConfig":"256"},{"size":2320,"mtime":1631322977254,"results":"374","hashOfConfig":"256"},{"size":3410,"mtime":1631322977254,"results":"375","hashOfConfig":"256"},{"size":251,"mtime":1631322977254,"results":"376","hashOfConfig":"256"},{"size":1076,"mtime":1631322977255,"results":"377","hashOfConfig":"256"},{"size":2736,"mtime":1631322977255,"results":"378","hashOfConfig":"256"},{"size":247,"mtime":1631322977256,"results":"379","hashOfConfig":"256"},{"size":5924,"mtime":1631322977256,"results":"380","hashOfConfig":"256"},{"size":8934,"mtime":1631322977256,"results":"381","hashOfConfig":"256"},{"size":10513,"mtime":1631322977257,"results":"382","hashOfConfig":"256"},{"size":7278,"mtime":1631322977258,"results":"383","hashOfConfig":"256"},{"size":159,"mtime":1630073184733,"results":"384","hashOfConfig":"256"},{"size":3279,"mtime":1631322977397,"results":"385","hashOfConfig":"256"},{"size":249,"mtime":1631322977258,"results":"386","hashOfConfig":"256"},{"size":6884,"mtime":1631322977259,"results":"387","hashOfConfig":"256"},{"size":5040,"mtime":1631322977259,"results":"388","hashOfConfig":"256"},{"size":9243,"mtime":1631322977260,"results":"389","hashOfConfig":"256"},{"size":5764,"mtime":1631322977396,"results":"390","hashOfConfig":"256"},{"size":40885,"mtime":1631322977261,"results":"391","hashOfConfig":"256"},{"size":1578,"mtime":1631322977262,"results":"392","hashOfConfig":"256"},{"size":2411,"mtime":1631322977262,"results":"393","hashOfConfig":"256"},{"size":3713,"mtime":1631322977263,"results":"394","hashOfConfig":"256"},{"size":862,"mtime":1631322977263,"results":"395","hashOfConfig":"256"},{"size":1780,"mtime":1631322977264,"results":"396","hashOfConfig":"256"},{"size":7911,"mtime":1631322977264,"results":"397","hashOfConfig":"256"},{"size":8484,"mtime":1631322977265,"results":"398","hashOfConfig":"256"},{"size":234,"mtime":1631322977265,"results":"399","hashOfConfig":"256"},{"size":9596,"mtime":1631322977266,"results":"400","hashOfConfig":"256"},{"size":2596,"mtime":1631322977266,"results":"401","hashOfConfig":"256"},{"size":7233,"mtime":1631322977268,"results":"402","hashOfConfig":"256"},{"size":438,"mtime":1631322977268,"results":"403","hashOfConfig":"256"},{"size":128,"mtime":1631322977268,"results":"404","hashOfConfig":"256"},{"size":8177,"mtime":1631322977269,"results":"405","hashOfConfig":"256"},{"size":842,"mtime":1631322977269,"results":"406","hashOfConfig":"256"},{"size":208,"mtime":1631322977269,"results":"407","hashOfConfig":"256"},{"size":2243,"mtime":1631322977270,"results":"408","hashOfConfig":"256"},{"size":81,"mtime":1631322977270,"results":"409","hashOfConfig":"256"},{"size":6922,"mtime":1631322977270,"results":"410","hashOfConfig":"256"},{"size":525,"mtime":1631322977271,"results":"411","hashOfConfig":"256"},{"size":735,"mtime":1631322977271,"results":"412","hashOfConfig":"256"},{"size":832,"mtime":1631322977272,"results":"413","hashOfConfig":"256"},{"size":942,"mtime":1631322977272,"results":"414","hashOfConfig":"256"},{"size":1698,"mtime":1631322977272,"results":"415","hashOfConfig":"256"},{"size":4085,"mtime":1631322977273,"results":"416","hashOfConfig":"256"},{"size":7597,"mtime":1631322977273,"results":"417","hashOfConfig":"256"},{"size":155,"mtime":1631322977274,"results":"418","hashOfConfig":"256"},{"size":224,"mtime":1631322977274,"results":"419","hashOfConfig":"256"},{"size":681,"mtime":1631322977274,"results":"420","hashOfConfig":"256"},{"size":464,"mtime":1631322977275,"results":"421","hashOfConfig":"256"},{"size":1520,"mtime":1631322977275,"results":"422","hashOfConfig":"256"},{"size":3120,"mtime":1631322977276,"results":"423","hashOfConfig":"256"},{"size":109,"mtime":1631322977276,"results":"424","hashOfConfig":"256"},{"size":280,"mtime":1631322977276,"results":"425","hashOfConfig":"256"},{"size":6503,"mtime":1631322977277,"results":"426","hashOfConfig":"256"},{"size":3632,"mtime":1631322977277,"results":"427","hashOfConfig":"256"},{"size":7269,"mtime":1631322977278,"results":"428","hashOfConfig":"256"},{"size":28772,"mtime":1631322977278,"results":"429","hashOfConfig":"256"},{"size":68437,"mtime":1631326926035,"results":"430","hashOfConfig":"256"},{"size":27489,"mtime":1631322977279,"results":"431","hashOfConfig":"256"},{"size":494,"mtime":1631322977329,"results":"432","hashOfConfig":"256"},{"size":7953,"mtime":1631322977330,"results":"433","hashOfConfig":"256"},{"size":1921,"mtime":1631322977330,"results":"434","hashOfConfig":"256"},{"size":15151,"mtime":1631322977330,"results":"435","hashOfConfig":"256"},{"size":4040,"mtime":1631322977331,"results":"436","hashOfConfig":"256"},{"size":3050,"mtime":1631322977331,"results":"437","hashOfConfig":"256"},{"size":16802,"mtime":1631322977332,"results":"438","hashOfConfig":"256"},{"size":3839,"mtime":1631322977332,"results":"439","hashOfConfig":"256"},{"size":4244,"mtime":1631322977332,"results":"440","hashOfConfig":"256"},{"size":346,"mtime":1630073184782,"results":"441","hashOfConfig":"256"},{"size":28975,"mtime":1631322977333,"results":"442","hashOfConfig":"256"},{"size":2870,"mtime":1631322977334,"results":"443","hashOfConfig":"256"},{"size":2122,"mtime":1631322977334,"results":"444","hashOfConfig":"256"},{"size":1185,"mtime":1631322977335,"results":"445","hashOfConfig":"256"},{"size":3348,"mtime":1631322977335,"results":"446","hashOfConfig":"256"},{"size":3246,"mtime":1631322977335,"results":"447","hashOfConfig":"256"},{"size":1166,"mtime":1631322977336,"results":"448","hashOfConfig":"256"},{"size":3833,"mtime":1631322977336,"results":"449","hashOfConfig":"256"},{"size":6448,"mtime":1631322977336,"results":"450","hashOfConfig":"256"},{"size":3884,"mtime":1631322977337,"results":"451","hashOfConfig":"256"},{"size":4497,"mtime":1631322977337,"results":"452","hashOfConfig":"256"},{"size":7007,"mtime":1631322977338,"results":"453","hashOfConfig":"256"},{"size":20015,"mtime":1631322977338,"results":"454","hashOfConfig":"256"},{"size":3019,"mtime":1631322977339,"results":"455","hashOfConfig":"256"},{"size":2830,"mtime":1631322977339,"results":"456","hashOfConfig":"256"},{"size":5166,"mtime":1631322977339,"results":"457","hashOfConfig":"256"},{"size":934,"mtime":1630073184787,"results":"458","hashOfConfig":"256"},{"size":1556,"mtime":1631322977340,"results":"459","hashOfConfig":"256"},{"size":1705,"mtime":1631322977340,"results":"460","hashOfConfig":"256"},{"size":5903,"mtime":1631322977341,"results":"461","hashOfConfig":"256"},{"size":1983,"mtime":1631322977341,"results":"462","hashOfConfig":"256"},{"size":122,"mtime":1630073184789,"results":"463","hashOfConfig":"256"},{"size":2197,"mtime":1631322977341,"results":"464","hashOfConfig":"256"},{"size":8761,"mtime":1631322977342,"results":"465","hashOfConfig":"256"},{"size":6646,"mtime":1631322977342,"results":"466","hashOfConfig":"256"},{"size":1796,"mtime":1631322977343,"results":"467","hashOfConfig":"256"},{"size":51261,"mtime":1631322977343,"results":"468","hashOfConfig":"256"},{"size":4079,"mtime":1631322977344,"results":"469","hashOfConfig":"256"},{"size":4941,"mtime":1631322977344,"results":"470","hashOfConfig":"256"},{"size":1566,"mtime":1631322977344,"results":"471","hashOfConfig":"256"},{"size":2358,"mtime":1631322977345,"results":"472","hashOfConfig":"256"},{"size":1630,"mtime":1631322977345,"results":"473","hashOfConfig":"256"},{"size":4245,"mtime":1631322977345,"results":"474","hashOfConfig":"256"},{"size":1389,"mtime":1631322977346,"results":"475","hashOfConfig":"256"},{"size":2720,"mtime":1631322977346,"results":"476","hashOfConfig":"256"},{"size":2996,"mtime":1631322977346,"results":"477","hashOfConfig":"256"},{"size":3990,"mtime":1631322977347,"results":"478","hashOfConfig":"256"},{"size":264,"mtime":1631322977347,"results":"479","hashOfConfig":"256"},{"size":7310,"mtime":1631322977348,"results":"480","hashOfConfig":"256"},{"size":2578,"mtime":1631322977348,"results":"481","hashOfConfig":"256"},{"size":1807,"mtime":1631322977348,"results":"482","hashOfConfig":"256"},{"size":2544,"mtime":1631322977349,"results":"483","hashOfConfig":"256"},{"size":1779,"mtime":1631322977349,"results":"484","hashOfConfig":"256"},{"size":1814,"mtime":1631322977349,"results":"485","hashOfConfig":"256"},{"size":2231,"mtime":1631322977350,"results":"486","hashOfConfig":"256"},{"size":346,"mtime":1631322977350,"results":"487","hashOfConfig":"256"},{"size":4953,"mtime":1631322977351,"results":"488","hashOfConfig":"256"},{"size":6442,"mtime":1631322977351,"results":"489","hashOfConfig":"256"},{"size":5853,"mtime":1631322977351,"results":"490","hashOfConfig":"256"},{"size":6822,"mtime":1631322977352,"results":"491","hashOfConfig":"256"},{"size":3053,"mtime":1631322977352,"results":"492","hashOfConfig":"256"},{"size":2472,"mtime":1631322977352,"results":"493","hashOfConfig":"256"},{"size":3472,"mtime":1631322977352,"results":"494","hashOfConfig":"256"},{"size":3087,"mtime":1631322977353,"results":"495","hashOfConfig":"256"},{"size":464,"mtime":1631322977353,"results":"496","hashOfConfig":"256"},{"size":3749,"mtime":1631322977353,"results":"497","hashOfConfig":"256"},{"size":2035,"mtime":1631322977354,"results":"498","hashOfConfig":"256"},{"size":7638,"mtime":1631322977354,"results":"499","hashOfConfig":"256"},{"size":4097,"mtime":1631322977355,"results":"500","hashOfConfig":"256"},{"size":4903,"mtime":1631322977356,"results":"501","hashOfConfig":"256"},{"size":3974,"mtime":1631322977356,"results":"502","hashOfConfig":"256"},{"size":20025,"mtime":1631322977357,"results":"503","hashOfConfig":"256"},{"size":466,"mtime":1630602586228,"results":"504","hashOfConfig":"256"},{"size":3976,"mtime":1631322977357,"results":"505","hashOfConfig":"256"},{"size":1890,"mtime":1631322977358,"results":"506","hashOfConfig":"256"},{"size":1540,"mtime":1631322977358,"results":"507","hashOfConfig":"256"},{"size":2038,"mtime":1631322977358,"results":"508","hashOfConfig":"256"},{"size":158,"mtime":1630602586230,"results":"509","hashOfConfig":"256"},{"size":10777,"mtime":1631322977359,"results":"510","hashOfConfig":"256"},{"filePath":"511","messages":"512","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"513"},"m2q679",{"filePath":"514","messages":"515","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"516","messages":"517","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"518","messages":"519","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"520","messages":"521","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"522"},{"filePath":"523","messages":"524","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"525","messages":"526","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"527","messages":"528","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"529","messages":"530","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"531","messages":"532","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"533","messages":"534","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"535","messages":"536","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"12e56j",{"filePath":"537","messages":"538","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"539","messages":"540","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"541","messages":"542","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"543","messages":"544","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"545","messages":"546","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"547","messages":"548","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"549","messages":"550","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"551","messages":"552","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"553","messages":"554","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"555","messages":"556","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"557","messages":"558","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"559","messages":"560","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"561","messages":"562","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"563","messages":"564","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"565","messages":"566","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"567","messages":"568","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"569","messages":"570","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"571","messages":"572","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"573","messages":"574","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"575","messages":"576","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"577","messages":"578","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"579","messages":"580","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"581","messages":"582","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"583","messages":"584","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"585","messages":"586","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"587","messages":"588","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"589","messages":"590","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"591","messages":"592","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"593","messages":"594","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"595","messages":"596","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"597","messages":"598","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"599","messages":"600","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"601","messages":"602","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"603","messages":"604","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"605","messages":"606","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"607","messages":"608","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"609","messages":"610","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"611","messages":"612","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"613","messages":"614","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"615","messages":"616","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"617","messages":"618","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"619","messages":"620","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"621","messages":"622","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"623","messages":"624","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"625","messages":"626","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"627","messages":"628","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"629","messages":"630","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"631","messages":"632","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"633","messages":"634","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"635","messages":"636","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"637","messages":"638","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"639","messages":"640","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"641","messages":"642","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"643","messages":"644","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"645","messages":"646","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"647","messages":"648","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"649","messages":"650","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"651","messages":"652","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"653","messages":"654","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"655","messages":"656","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"657","messages":"658","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"659","messages":"660","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"661","messages":"662","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"663","messages":"664","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"665","messages":"666","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"667","messages":"668","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"669","messages":"670","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"671","messages":"672","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"673","messages":"674","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"675"},{"filePath":"676","messages":"677","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"678","messages":"679","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"680","messages":"681","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"682","messages":"683","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"684","messages":"685","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"686","messages":"687","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"688","messages":"689","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"690","messages":"691","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"692","messages":"693","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"694","messages":"695","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"696","messages":"697","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"698","messages":"699","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"700","messages":"701","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"702","messages":"703","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"704","messages":"705","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"706","messages":"707","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"708","messages":"709","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"710","messages":"711","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"712","messages":"713","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"714","messages":"715","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"716","messages":"717","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"718","messages":"719","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"720","messages":"721","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"722","messages":"723","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"724","messages":"725","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"726","messages":"727","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"728","messages":"729","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"730","messages":"731","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"732","messages":"733","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"734","messages":"735","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"736","messages":"737","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"738","messages":"739","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"740","messages":"741","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"742","messages":"743","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"744","messages":"745","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"746","messages":"747","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"748","messages":"749","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"750","messages":"751","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"752"},{"filePath":"753","messages":"754","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"755","messages":"756","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"757","messages":"758","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"759","messages":"760","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"761","messages":"762","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"763","messages":"764","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"765","messages":"766","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"767","messages":"768","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"769","messages":"770","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"771","messages":"772","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"773","messages":"774","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"775","messages":"776","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"777","messages":"778","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"779","messages":"780","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"781","messages":"782","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"783","messages":"784","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"785"},{"filePath":"786","messages":"787","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"788","messages":"789","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"790","messages":"791","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"792","messages":"793","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"794","messages":"795","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"796","messages":"797","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"798","messages":"799","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"800","messages":"801","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"802","messages":"803","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"804","messages":"805","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"806","messages":"807","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"808","messages":"809","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"810","messages":"811","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"812","messages":"813","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"814","messages":"815","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"816","messages":"817","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"818","messages":"819","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"820","messages":"821","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"822","messages":"823","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"824","messages":"825","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"826","messages":"827","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"828","messages":"829","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"830","messages":"831","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"832","messages":"833","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"834","messages":"835","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"836","messages":"837","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"838","messages":"839","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"840","messages":"841","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"842","messages":"843","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"844","messages":"845","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"846","messages":"847","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"848","messages":"849","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"850","messages":"851","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"852","messages":"853","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"854","messages":"855","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"856","messages":"857","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"858","messages":"859","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"860","messages":"861","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"862","messages":"863","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"864","messages":"865","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"866","messages":"867","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"868","messages":"869","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"870","messages":"871","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"872","messages":"873","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"874","messages":"875","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"876","messages":"877","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"878","messages":"879","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"880","messages":"881","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"882","messages":"883","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"884","messages":"885","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"886","messages":"887","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"888","messages":"889","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"890","messages":"891","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"892","messages":"893","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"894","messages":"895","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"896","messages":"897","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"898","messages":"899","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"900","messages":"901","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"902","messages":"903","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"904","messages":"905","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"906","messages":"907","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"908","messages":"909","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"910","messages":"911","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"912","messages":"913","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"914","messages":"915","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"916","messages":"917","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"918","messages":"919","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"920","messages":"921","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"922","messages":"923","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"924","messages":"925","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"926","messages":"927","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"928","messages":"929","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"930","messages":"931","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"932","messages":"933","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"934","messages":"935","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"936","messages":"937","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"938","messages":"939","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"940","messages":"941","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"942","messages":"943","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"944","messages":"945","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"946","messages":"947","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"948","messages":"949","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"950","messages":"951","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"952","messages":"953","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"954","messages":"955","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"956","messages":"957","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"958","messages":"959","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"960","messages":"961","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"962","messages":"963","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"964","messages":"965","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"966","messages":"967","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"968","messages":"969","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"970","messages":"971","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"972","messages":"973","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"974","messages":"975","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"976","messages":"977","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"978","messages":"979","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"980","messages":"981","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"982","messages":"983","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"984","messages":"985","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"986","messages":"987","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"988","messages":"989","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"990","messages":"991","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"992","messages":"993","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"994","messages":"995","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"996","messages":"997","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"998","messages":"999","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1000","messages":"1001","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1002","messages":"1003","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1004","messages":"1005","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1006","messages":"1007","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1008","messages":"1009","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1010"},{"filePath":"1011","messages":"1012","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1013","messages":"1014","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1015","messages":"1016","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1017","messages":"1018","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1019","messages":"1020","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1021","messages":"1022","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1023","messages":"1024","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/backend/bindings/node/index.ts",["1025","1026"],"import { BridgeMessage, MessageResponse, CommunicationIds } from '../../../shared/lib/typings/bridge'\nimport {\n    AccountToCreate,\n    AccountIdentifier,\n    ListMessagesFilter,\n    SyncAccountOptions,\n    createAccount as _createAccount,\n    removeAccount as _removeAccount,\n    getAccount as _getAccount,\n    getAccounts as _getAccounts,\n    syncAccounts as _syncAccounts,\n    internalTransfer as _internalTransfer,\n    generateAddress as _generateAddress,\n    getUnusedAddress as _getUnusedAddress,\n    listMessages as _listMessages,\n    listAddresses as _listAddresses,\n    getBalance as _getBalance,\n    latestAddress as _latestAddress,\n    syncAccount as _syncAccount,\n    isLatestAddressUnused as _isLatestAddressUnused,\n    areLatestAddressesUnused as _areLatestAddressesUnused,\n    setAlias as _setAlias,\n    getNodeInfo as _getNodeInfo,\n    startBackgroundSync as _startBackgroundSync,\n    stopBackgroundSync as _stopBackgroundSync,\n} from '../../../shared/lib/typings/account'\nimport { Transfer, reattach as _reattach } from '../../../shared/lib/typings/message'\nimport {\n    getMigrationData as _getMigrationData,\n    createMigrationBundle as _createMigrationBundle,\n    sendMigrationBundle as _sendMigrationBundle,\n    getMigrationAddress as _getMigrationAddreess,\n    mineBundle as _mineBundle,\n    getLedgerMigrationData as _getLedgerMigrationData,\n    sendLedgerMigrationBundle as _sendLedgerMigrationBundle,\n    getLegacyAddressChecksum as _getLegacyAddressChecksum,\n    AddressInput,\n} from '../../../shared/lib/typings/migration'\nimport {\n    LoggerConfig,\n    Duration,\n    backup as _backup,\n    restoreBackup as _restoreBackup,\n    setStrongholdPassword as _setStrongholdPassword,\n    setStoragePassword as _setStoragePassword,\n    send as _send,\n    generateMnemonic as _generateMnemonic,\n    storeMnemonic as _storeMnemonic,\n    verifyMnemonic as _verifyMnemonic,\n    getStrongholdStatus as _getStrongholdStatus,\n    removeStorage as _removeStorage,\n    lockStronghold as _lockStronghold,\n    changeStrongholdPassword as _changeStrongholdPassword,\n    setClientOptions as _setClientOptions,\n    getLedgerDeviceStatus as _getLedgerDeviceStatus,\n    setStrongholdPasswordClearInterval as _setStrongholdPasswordClearInterval,\n    getLegacySeedChecksum as _getLegacySeedChecksum,\n} from '../../../shared/lib/typings/wallet'\nimport { ClientOptions } from '../../../shared/lib/typings/client'\nimport { NodeAuth } from '../../../shared/lib/typings/node'\n\n// @ts-ignore\nimport addon = require('../index.node')\n\nconst mailbox = []\nconst onMessageListeners: ((payload: MessageResponse) => void)[] = []\n\nfunction _poll(\n    runtime: typeof addon.ActorSystem,\n    cb: (error: string, data: unknown) => void,\n    shouldStop: () => boolean\n) {\n    runtime.poll((err: string, data: string) => {\n        cb(err, err ? null : JSON.parse(data))\n        if (!shouldStop()) {\n            _poll(runtime, cb, shouldStop)\n        }\n    })\n}\n\nfunction sendMessage(message: BridgeMessage): Promise<string> {\n    const { id } = message\n\n    return new Promise((resolve) => addon.sendMessage(JSON.stringify(message), () => resolve(id)))\n}\n\nexport function init(id: string, storagePath?: string): { destroy: () => void; removeEventListeners: () => void } {\n    const runtime = storagePath ? new addon.ActorSystem(id, storagePath) : new addon.ActorSystem(id)\n    let destroyed = false\n    _poll(\n        runtime,\n        (error, data) => {\n            const message = error || data\n            mailbox.push(message)\n            // @ts-ignore\n            onMessageListeners.forEach((listener) => listener(message))\n        },\n        () => destroyed\n    )\n    return {\n        destroy() {\n            destroyed = true\n            runtime.destroy()\n        },\n        removeEventListeners() {\n            runtime.removeEventListeners()\n        },\n    }\n}\n\nexport function onMessage(cb: (payload: unknown) => void): void {\n    onMessageListeners.push(cb)\n}\n\nexport function initLogger(config: LoggerConfig): void {\n    addon.initLogger(JSON.stringify(config))\n}\n\nexport const api = {\n    setAlias: function (\n        accountId: AccountIdentifier,\n        newAccountAlias: string\n    ): (__ids: CommunicationIds) => Promise<string> {\n        return (__ids: CommunicationIds) => _setAlias(sendMessage, __ids, accountId, newAccountAlias)\n    },\n    getStrongholdStatus: function (): (__ids: CommunicationIds) => Promise<string> {\n        return (__ids: CommunicationIds) => _getStrongholdStatus(sendMessage, __ids)\n    },\n    lockStronghold: function (): (__ids: CommunicationIds) => Promise<string> {\n        return (__ids: CommunicationIds) => _lockStronghold(sendMessage, __ids)\n    },\n    generateMnemonic: function (): (__ids: CommunicationIds) => Promise<string> {\n        return (__ids: CommunicationIds) => _generateMnemonic(sendMessage, __ids)\n    },\n    storeMnemonic: function (mnemonic?: string): (__ids: CommunicationIds) => Promise<string> {\n        return (__ids: CommunicationIds) =>\n            _storeMnemonic(sendMessage, __ids, {\n                signerType: { type: 'Stronghold' },\n                mnemonic: mnemonic || null,\n            })\n    },\n    verifyMnemonic: function (mnemonic: string): (__ids: CommunicationIds) => Promise<string> {\n        return (__ids: CommunicationIds) => _verifyMnemonic(sendMessage, __ids, mnemonic)\n    },\n    createAccount: function (account: AccountToCreate): (__ids: CommunicationIds) => Promise<string> {\n        return (__ids: CommunicationIds) => _createAccount(sendMessage, __ids, account)\n    },\n    removeAccount: function (accountId: AccountIdentifier): (__ids: CommunicationIds) => Promise<string> {\n        return (__ids: CommunicationIds) => _removeAccount(sendMessage, __ids, accountId)\n    },\n    getAccount: function (accountId: AccountIdentifier): (__ids: CommunicationIds) => Promise<string> {\n        return (__ids: CommunicationIds) => _getAccount(sendMessage, __ids, accountId)\n    },\n    getAccounts: function (): (__ids: CommunicationIds) => Promise<string> {\n        return (__ids: CommunicationIds) => _getAccounts(sendMessage, __ids)\n    },\n    syncAccounts: function (\n        addressIndex?: number,\n        gapLimit?: number,\n        accountDiscoveryThreshold?: number\n    ): (__ids: CommunicationIds) => Promise<string> {\n        return (__ids: CommunicationIds) =>\n            _syncAccounts(sendMessage, __ids, addressIndex, gapLimit, accountDiscoveryThreshold)\n    },\n    startBackgroundSync: function (\n        pollingInterval: Duration,\n        automaticOutputConsolidation: boolean\n    ): (__ids: CommunicationIds) => Promise<string> {\n        return (__ids: CommunicationIds) =>\n            _startBackgroundSync(sendMessage, __ids, pollingInterval, automaticOutputConsolidation)\n    },\n    stopBackgroundSync: function (): (__ids: CommunicationIds) => Promise<string> {\n        return (__ids: CommunicationIds) => _stopBackgroundSync(sendMessage, __ids)\n    },\n    areLatestAddressesUnused: function (): (__ids: CommunicationIds) => Promise<string> {\n        return (__ids: CommunicationIds) => _areLatestAddressesUnused(sendMessage, __ids)\n    },\n    generateAddress: function (accountId: AccountIdentifier): (__ids: CommunicationIds) => Promise<string> {\n        return (__ids: CommunicationIds) => _generateAddress(sendMessage, __ids, accountId)\n    },\n    getUnusedAddress: function (accountId: AccountIdentifier): (__ids: CommunicationIds) => Promise<string> {\n        return (__ids: CommunicationIds) => _getUnusedAddress(sendMessage, __ids, accountId)\n    },\n    listMessages: function (\n        accountId: AccountIdentifier,\n        filters?: ListMessagesFilter\n    ): (__ids: CommunicationIds) => Promise<string> {\n        return (__ids: CommunicationIds) => _listMessages(sendMessage, __ids, accountId, filters)\n    },\n    listAddresses: function (\n        accountId: AccountIdentifier,\n        unspent?: boolean\n    ): (__ids: CommunicationIds) => Promise<string> {\n        return (__ids: CommunicationIds) => _listAddresses(sendMessage, __ids, accountId, unspent)\n    },\n    getBalance: function (accountId: AccountIdentifier): (__ids: CommunicationIds) => Promise<string> {\n        return (__ids: CommunicationIds) => _getBalance(sendMessage, __ids, accountId)\n    },\n    latestAddress: function (accountId: AccountIdentifier): (__ids: CommunicationIds) => Promise<string> {\n        return (__ids: CommunicationIds) => _latestAddress(sendMessage, __ids, accountId)\n    },\n    syncAccount: function (\n        accountId: AccountIdentifier,\n        options?: SyncAccountOptions\n    ): (__ids: CommunicationIds) => Promise<string> {\n        return (__ids: CommunicationIds) => _syncAccount(sendMessage, __ids, accountId, options)\n    },\n    isLatestAddressUnused: function (accountId: AccountIdentifier): (__ids: CommunicationIds) => Promise<string> {\n        return (__ids: CommunicationIds) => _isLatestAddressUnused(sendMessage, __ids, accountId)\n    },\n    reattach: function (accountId: AccountIdentifier, messageId: string): (__ids: CommunicationIds) => Promise<string> {\n        return (__ids: CommunicationIds) => _reattach(sendMessage, __ids, accountId, messageId)\n    },\n    backup: function (destinationPath: string, password: string): (__ids: CommunicationIds) => Promise<string> {\n        return (__ids: CommunicationIds) => _backup(sendMessage, __ids, destinationPath, password)\n    },\n    restoreBackup: function (backupPath: string, password: string): (__ids: CommunicationIds) => Promise<string> {\n        return (__ids: CommunicationIds) => _restoreBackup(sendMessage, __ids, backupPath, password)\n    },\n    setStrongholdPassword: function (password: string): (__ids: CommunicationIds) => Promise<string> {\n        return (__ids: CommunicationIds) => _setStrongholdPassword(sendMessage, __ids, password)\n    },\n    changeStrongholdPassword: function (\n        currentPassword: string,\n        newPassword: string\n    ): (__ids: CommunicationIds) => Promise<string> {\n        return (__ids: CommunicationIds) =>\n            _changeStrongholdPassword(sendMessage, __ids, {\n                currentPassword,\n                newPassword,\n            })\n    },\n    setStoragePassword: function (password: string): (__ids: CommunicationIds) => Promise<string> {\n        return (__ids: CommunicationIds) => _setStoragePassword(sendMessage, __ids, password)\n    },\n    removeStorage: function (): (__ids: CommunicationIds) => Promise<string> {\n        return (__ids: CommunicationIds) => _removeStorage(sendMessage, __ids)\n    },\n    send: function (\n        fromAccountId: AccountIdentifier,\n        transfer: Transfer\n    ): (__ids: CommunicationIds) => Promise<string> {\n        return (__ids: CommunicationIds) => _send(sendMessage, __ids, fromAccountId, transfer)\n    },\n    internalTransfer: function (\n        fromAccountId: AccountIdentifier,\n        toAccountId: AccountIdentifier,\n        amount: number\n    ): (__ids: CommunicationIds) => Promise<string> {\n        return (__ids: CommunicationIds) => _internalTransfer(sendMessage, __ids, fromAccountId, toAccountId, amount)\n    },\n    setClientOptions: function (options: ClientOptions): (__ids: CommunicationIds) => Promise<string> {\n        return (__ids: CommunicationIds) => _setClientOptions(sendMessage, __ids, options)\n    },\n    setStrongholdPasswordClearInterval: function (interval: Duration): (__ids: CommunicationIds) => Promise<string> {\n        return (__ids: CommunicationIds) => _setStrongholdPasswordClearInterval(sendMessage, __ids, interval)\n    },\n    getLegacySeedChecksum: function (seed: string): (__ids: CommunicationIds) => Promise<string> {\n        return (__ids: CommunicationIds) => _getLegacySeedChecksum(sendMessage, __ids, seed)\n    },\n\n    // Migration related methods\n    getMigrationData: function (\n        seed: string,\n        nodes: string[],\n        securityLevel?: number,\n        initialAddressIndex?: number,\n        permanode?: string\n    ): (__ids: CommunicationIds) => Promise<string> {\n        return (__ids: CommunicationIds) =>\n            _getMigrationData(sendMessage, __ids, seed, nodes, securityLevel, initialAddressIndex, permanode)\n    },\n    createMigrationBundle: function (\n        seed: string,\n        inputAddressIndexes: number[],\n        mine: boolean,\n        timeoutSeconds: number,\n        offset: number,\n        logFileName: string\n    ): (__ids: CommunicationIds) => Promise<string> {\n        return (__ids: CommunicationIds) =>\n            _createMigrationBundle(\n                sendMessage,\n                __ids,\n                seed,\n                inputAddressIndexes,\n                mine,\n                timeoutSeconds,\n                offset,\n                logFileName\n            )\n    },\n    sendMigrationBundle: function (\n        nodes: string[],\n        bundleHash: string,\n        mwm: number\n    ): (__ids: CommunicationIds) => Promise<string> {\n        return (__ids: CommunicationIds) => _sendMigrationBundle(sendMessage, __ids, nodes, bundleHash, mwm)\n    },\n    getMigrationAddress: function (\n        prompt: boolean,\n        accountIndex: number\n    ): (__ids: CommunicationIds) => Promise<string> {\n        return (__ids: CommunicationIds) => _getMigrationAddreess(sendMessage, __ids, prompt, accountIndex)\n    },\n    mineBundle: function (\n        bundle: string[],\n        spentBundleHashes: string[],\n        securityLevel: number,\n        timeout: number,\n        offset: number\n    ): (__ids: CommunicationIds) => Promise<string> {\n        return (__ids: CommunicationIds) =>\n            _mineBundle(sendMessage, __ids, bundle, spentBundleHashes, securityLevel, timeout, offset)\n    },\n    getLedgerMigrationData: function (\n        addresses: AddressInput[],\n        nodes: string[],\n        permanode: string,\n        securityLevel: number\n    ): (__ids: CommunicationIds) => Promise<string> {\n        return (__ids: CommunicationIds) =>\n            _getLedgerMigrationData(sendMessage, __ids, addresses, nodes, permanode, securityLevel)\n    },\n    sendLedgerMigrationBundle: function (\n        nodes: string[],\n        bundle: string[],\n        mwm: number\n    ): (__ids: CommunicationIds) => Promise<string> {\n        return (__ids: CommunicationIds) => _sendLedgerMigrationBundle(sendMessage, __ids, nodes, bundle, mwm)\n    },\n    getNodeInfo: function (\n        accountId: AccountIdentifier,\n        url?: string,\n        auth?: NodeAuth\n    ): (__ids: CommunicationIds) => Promise<string> {\n        return (__ids: CommunicationIds) => _getNodeInfo(sendMessage, __ids, accountId, url, auth)\n    },\n    getLegacyAddressChecksum: function (address: string): (__ids: CommunicationIds) => Promise<string> {\n        return (__ids: CommunicationIds) => _getLegacyAddressChecksum(sendMessage, __ids, address)\n    },\n    // Event emitters\n    onError: function (): (__ids: CommunicationIds) => Promise<string> {\n        return (__ids: CommunicationIds) => addon.listen(__ids.actorId, __ids.messageId, 'ErrorThrown')\n    },\n    onBalanceChange: function (): (__ids: CommunicationIds) => Promise<string> {\n        return (__ids: CommunicationIds) => addon.listen(__ids.actorId, __ids.messageId, 'BalanceChange')\n    },\n    onNewTransaction: function (): (__ids: CommunicationIds) => Promise<string> {\n        return (__ids: CommunicationIds) => addon.listen(__ids.actorId, __ids.messageId, 'NewTransaction')\n    },\n    onConfirmationStateChange: function (): (__ids: CommunicationIds) => Promise<string> {\n        return (__ids: CommunicationIds) => addon.listen(__ids.actorId, __ids.messageId, 'ConfirmationStateChange')\n    },\n    onReattachment: function (): (__ids: CommunicationIds) => Promise<string> {\n        return (__ids: CommunicationIds) => addon.listen(__ids.actorId, __ids.messageId, 'Reattachment')\n    },\n    onBroadcast: function (): (__ids: CommunicationIds) => Promise<string> {\n        return (__ids: CommunicationIds) => addon.listen(__ids.actorId, __ids.messageId, 'Broadcast')\n    },\n    onStrongholdStatusChange: function (): (__ids: CommunicationIds) => Promise<string> {\n        return (__ids: CommunicationIds) => addon.listen(__ids.actorId, __ids.messageId, 'StrongholdStatusChange')\n    },\n    onTransferProgress: function (): (__ids: CommunicationIds) => Promise<string> {\n        return (__ids: CommunicationIds) => addon.listen(__ids.actorId, __ids.messageId, 'TransferProgress')\n    },\n    onLedgerAddressGeneration: function (): (__ids: CommunicationIds) => Promise<string> {\n        return (__ids: CommunicationIds) => addon.listen(__ids.actorId, __ids.messageId, 'LedgerAddressGeneration')\n    },\n    getLedgerDeviceStatus: function (isSimulator: boolean): (__ids: CommunicationIds) => Promise<string> {\n        return (__ids: CommunicationIds) => _getLedgerDeviceStatus(sendMessage, __ids, isSimulator)\n    },\n    onMigrationProgress: function (): (__ids: CommunicationIds) => Promise<string> {\n        return (__ids: CommunicationIds) => addon.listen(__ids.actorId, __ids.messageId, 'MigrationProgress')\n    },\n}\n","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/backend/bindings/node/rollup.config.js",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/backend/bindings/node/scripts/build.js",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/backend/bindings/node/test/index.js",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/desktop/App.svelte",["1027"],"<script lang=\"typescript\">\n    import { Popup, Route, TitleBar, ToastContainer } from 'shared/components'\n    import { loggedIn, mobile } from 'shared/lib/app'\n    import { appSettings } from 'shared/lib/appSettings'\n    import { getVersionDetails, pollVersion, versionDetails } from 'shared/lib/appUpdater'\n    import { Electron } from 'shared/lib/electron'\n    import { addError } from 'shared/lib/errors'\n    import { goto } from 'shared/lib/helpers'\n    import { dir, isLocaleLoaded, setupI18n, _ } from 'shared/lib/i18n'\n    import { pollMarketData } from 'shared/lib/market'\n    import { openPopup, popupState } from 'shared/lib/popup'\n    import { cleanupEmptyProfiles, cleanupInProgressProfiles } from 'shared/lib/profile'\n    import { dashboardRoute, initRouter, routerNext, routerPrevious, walletRoute } from 'shared/lib/router'\n    import { AppRoute, Tabs } from 'shared/lib/typings/routes'\n    import {\n        Appearance,\n        Backup,\n        Balance,\n        Congratulations,\n        Create,\n        Dashboard,\n        Import,\n        Ledger,\n        Legal,\n        Login,\n        Migrate,\n        Password,\n        Profile,\n        Protect,\n        Secure,\n        Settings,\n        Setup,\n        Splash,\n        Welcome,\n    } from 'shared/routes'\n    import { onMount } from 'svelte'\n    import { get } from 'svelte/store'\n    import { getLocalisedMenuItems } from './lib/helpers'\n    import { Locale } from 'shared/lib/typings/i18n'\n\n    $: $appSettings.darkMode ? document.body.classList.add('scheme-dark') : document.body.classList.remove('scheme-dark')\n    $: {\n        isLocaleLoaded.subscribe((loaded) => {\n            if (loaded) {\n                Electron.updateMenu('strings', getLocalisedMenuItems($_ as Locale))\n            }\n        })\n    }\n    $: Electron.updateMenu('loggedIn', $loggedIn)\n\n    $: if (document.dir !== $dir) {\n        document.dir = $dir\n    }\n\n    let splash = true\n    let settings = false\n\n    void setupI18n({ fallbackLocale: 'en', initialLocale: $appSettings.language })\n    onMount(async () => {\n        setTimeout(() => {\n            splash = false\n            initRouter()\n        }, 3000)\n\n        await pollMarketData()\n\n        // @ts-ignore: This value is replaced by Webpack DefinePlugin\n        /* eslint-disable no-undef */\n        if (!devMode) {\n            await getVersionDetails()\n            pollVersion()\n        }\n        Electron.onEvent('menu-navigate-wallet', (route) => {\n            if (get(dashboardRoute) !== Tabs.Wallet) {\n                dashboardRoute.set(Tabs.Wallet)\n            }\n            walletRoute.set(route)\n        })\n        Electron.onEvent('menu-navigate-settings', () => {\n            if ($loggedIn) {\n                if (get(dashboardRoute) !== Tabs.Settings) {\n                    dashboardRoute.set(Tabs.Settings)\n                }\n            } else {\n                settings = true\n            }\n        })\n        Electron.onEvent('menu-check-for-update', () => {\n            openPopup({\n                type: 'version',\n                props: {\n                    currentVersion: $versionDetails.currentVersion,\n                },\n            })\n        })\n        Electron.onEvent('menu-error-log', () => {\n            openPopup({ type: 'errorLog' })\n        })\n        Electron.onEvent('menu-diagnostics', () => {\n            openPopup({ type: 'diagnostics' })\n        })\n        Electron.hookErrorLogger((err) => {\n            addError(err)\n        })\n\n        await cleanupInProgressProfiles()\n        await cleanupEmptyProfiles()\n    })\n</script>\n\n<style global type=\"text/scss\">\n    @tailwind base;\n    @tailwind components;\n    @tailwind utilities;\n    @import '../shared/style/style.scss';\n    html,\n    body {\n        @apply bg-white;\n        @apply select-none;\n        -webkit-user-drag: none;\n\n        ::-webkit-scrollbar {\n            @apply w-5;\n            @apply h-5;\n        }\n\n        ::-webkit-scrollbar-track {\n            @apply bg-transparent;\n        }\n\n        ::-webkit-scrollbar-corner {\n            @apply bg-transparent;\n        }\n\n        ::-webkit-scrollbar-thumb {\n            @apply bg-gray-300;\n            @apply border-solid;\n            @apply rounded-2xl;\n            border-width: 7px;\n            /* This needs to match the background it is displayed on\n               and can be override in local components using the secondary \n               and tertiary styles */\n            @apply border-white;\n        }\n\n        .scroll-secondary {\n            &::-webkit-scrollbar-thumb {\n                @apply border-white;\n            }\n        }\n\n        .scroll-tertiary {\n            &::-webkit-scrollbar-thumb {\n                @apply border-gray-50;\n            }\n        }\n\n        .scroll-quaternary {\n            &::-webkit-scrollbar-thumb {\n                @apply border-gray-100;\n            }\n        }\n\n        &.scheme-dark {\n            @apply bg-gray-900;\n            :global(::-webkit-scrollbar-thumb) {\n                @apply bg-gray-700;\n                @apply border-gray-900;\n            }\n\n            .scroll-secondary {\n                &::-webkit-scrollbar-thumb {\n                    @apply border-gray-800;\n                }\n            }\n\n            .scroll-tertiary {\n                &::-webkit-scrollbar-thumb {\n                    @apply border-gray-900;\n                }\n            }\n\n            .scroll-quaternary {\n                &::-webkit-scrollbar-thumb {\n                    @apply border-gray-900;\n                }\n            }\n        }\n\n        .multiwrap-line2 {\n            -webkit-line-clamp: 2;\n            -webkit-box-orient: vertical;\n            display: -webkit-box;\n        }\n    }\n    @layer utilities {\n        .scrollable-y {\n            @apply overflow-y-auto;\n            @apply -mr-2;\n            @apply pr-2;\n        }\n    }\n    img {\n        -webkit-user-drag: none;\n    }\n</style>\n\n<TitleBar>\n    <!-- empty div to avoid auto-purge removing dark classes -->\n    <div class=\"scheme-dark\" />\n    {#if !$isLocaleLoaded || splash}\n        <Splash />\n    {:else}\n        {#if $popupState.active}\n            <Popup\n                type={$popupState.type}\n                props={$popupState.props}\n                hideClose={$popupState.hideClose}\n                fullScreen={$popupState.fullScreen}\n                transition={$popupState.transition}\n                locale={$_} />\n        {/if}\n        <Route route={AppRoute.Welcome}>\n            <Welcome on:next={routerNext} on:previous={routerPrevious} mobile={$mobile} locale={$_} />\n        </Route>\n        <Route route={AppRoute.Legal}>\n            <Legal on:next={routerNext} on:previous={routerPrevious} mobile={$mobile} locale={$_} />\n        </Route>\n        <Route route={AppRoute.Appearance}>\n            <Appearance on:next={routerNext} on:previous={routerPrevious} mobile={$mobile} locale={$_} />\n        </Route>\n        <Route route={AppRoute.Profile}>\n            <Profile on:next={routerNext} on:previous={routerPrevious} mobile={$mobile} locale={$_} />\n        </Route>\n        <Route route={AppRoute.Setup}>\n            <Setup on:next={routerNext} on:previous={routerPrevious} mobile={$mobile} locale={$_} />\n        </Route>\n        <!-- TODO: fix ledger -->\n        <Route route={AppRoute.Create}>\n            <Create on:next={routerNext} on:previous={routerPrevious} mobile={$mobile} locale={$_} />\n        </Route>\n        <Route route={AppRoute.LedgerSetup}>\n            <Ledger on:next={routerNext} on:previous={routerPrevious} mobile={$mobile} locale={$_} />\n        </Route>\n        <!--  -->\n        <Route route={AppRoute.Secure}>\n            <Secure on:next={routerNext} on:previous={routerPrevious} mobile={$mobile} locale={$_} />\n        </Route>\n        <Route route={AppRoute.Password}>\n            <Password on:next={routerNext} on:previous={routerPrevious} mobile={$mobile} locale={$_} />\n        </Route>\n        <Route route={AppRoute.Protect} transition={false}>\n            <Protect on:next={routerNext} on:previous={routerPrevious} mobile={$mobile} locale={$_} />\n        </Route>\n        <Route route={AppRoute.Backup} transition={false}>\n            <Backup on:next={routerNext} on:previous={routerPrevious} mobile={$mobile} locale={$_} />\n        </Route>\n        <Route route={AppRoute.Import} transition={false}>\n            <Import on:next={routerNext} on:previous={routerPrevious} mobile={$mobile} locale={$_} />\n        </Route>\n        <Route route={AppRoute.Balance}>\n            <Balance on:next={routerNext} on:previous={routerPrevious} mobile={$mobile} locale={$_} />\n        </Route>\n        <Route route={AppRoute.Migrate}>\n            <Migrate on:next={routerNext} on:previous={routerPrevious} mobile={$mobile} locale={$_} {goto} />\n        </Route>\n        <Route route={AppRoute.Congratulations}>\n            <Congratulations on:next={routerNext} mobile={$mobile} locale={$_} {goto} />\n        </Route>\n        <Route route={AppRoute.Dashboard}>\n            <Dashboard mobile={$mobile} locale={$_} {goto} />\n        </Route>\n        <Route route={AppRoute.Login}>\n            <Login on:next={routerNext} on:previous={routerPrevious} mobile={$mobile} locale={$_} {goto} />\n        </Route>\n        {#if settings}\n            <Settings locale={$_} handleClose={() => (settings = false)} />\n        {/if}\n\n        <ToastContainer />\n    {/if}\n</TitleBar>\n","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/desktop/electron/lib/Ledger.js",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/desktop/electron/lib/aboutPreload.js",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/desktop/electron/lib/appUpdater.js",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/desktop/electron/lib/deepLinkManager.js",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/desktop/electron/lib/errorPreload.js",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/desktop/electron/lib/kdbx.js",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/desktop/electron/lib/keychain.js",["1028"],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/desktop/electron/lib/menu.js",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/desktop/electron/lib/menuState.js",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/desktop/electron/lib/notificationManager.js",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/desktop/electron/lib/pincodeManager.js",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/desktop/electron/main.js",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/desktop/electron/preload.js",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/desktop/index.js",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/desktop/lib/helpers.ts",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/desktop/postcss.config.js",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/desktop/scripts/notarize.macos.js",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/desktop/webpack.config.js",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/mobile/App.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/mobile/lib/api.ts",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/mobile/lib/empty.ts",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/mobile/main.js",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/mobile/postcss.config.js",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/mobile/rollup.config.js",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/AccountTile.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/ActivityDetail.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/ActivityRow.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/Animation.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/BalanceSummary.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/Box.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/BundleMiningLayout.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/Button.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/ButtonCheckbox.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/ButtonRadio.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/DashboardPane.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/Error.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/HR.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/Idle.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/Illustration.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/Link.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/Logo.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/OnboardingLayout.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/Profile.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/ProgressBar.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/ProgressFlow.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/QR.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/RecoveryPhrase.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/Route.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/Scroller.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/SecurityTile.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/SettingsMenu.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/SettingsNavigator.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/Sidebar.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/SpentAddress.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/Spinner.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/Text.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/TitleBar.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/Toast.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/ToastContainer.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/Tooltip.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/TransactionItem.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/Transition.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/Video.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/charts/Bar.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/charts/Index.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/charts/Line.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/charts/defaults.js",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/icon/Index.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/icon/icons.js",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/index.js",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/inputs/Address.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/inputs/Amount.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/inputs/Checkbox.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/inputs/Dropdown.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/inputs/Dropzone.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/inputs/ImportTextfield.svelte",["1029"],"<script lang=\"typescript\">\n    import { Text } from 'shared/components'\n    import { debounce } from 'shared/lib/utils'\n    import { asyncGetLegacySeedChecksum, asyncVerifyMnemonic } from 'shared/lib/wallet'\n    import { english } from 'shared/lib/wordlists/english'\n    import { Locale } from 'shared/lib/typings/i18n'\n\n    export let locale: Locale\n\n    export let value = undefined\n    export let type: Type = Type.Seed\n\n    export let disabled = false\n\n    let statusMessage = ''\n    let content = ''\n    let error = false\n    let seedChecksum = ''\n\n    enum Type {\n        Seed = 'seed',\n        Mnemonic = 'mnemonic',\n    }\n\n    const isSeed = (value: string): string | undefined => {\n        if (value.length !== 81) {\n            return locale('error.backup.seedTooShort', {\n                values: {\n                    length: value.length,\n                },\n            })\n        }\n        if (!/^[9A-Z]+$/.test(value)) {\n            return locale('error.backup.seedCharacters')\n        }\n    }\n\n    const isMnemonic = (words: string[]): string | undefined => {\n        if (words.length !== 24) {\n            return locale('error.backup.phraseWordCount', {\n                values: {\n                    length: words.length,\n                },\n            })\n        }\n        for (let i = 0; i < words.length; i++) {\n            const includesWord = english.includes(words[i])\n            const includesWordOtherCase = english.includes(words[i].toLowerCase())\n            if (!includesWord && includesWordOtherCase) {\n                return locale('error.backup.phraseCaseWord', {\n                    values: {\n                        word: words[i],\n                    },\n                })\n            } else if (!includesWord) {\n                return locale('error.backup.phraseUnrecognizedWord', {\n                    values: {\n                        word: words[i],\n                    },\n                })\n            }\n        }\n    }\n\n    const handleKeyDown = async () => {\n        value = ''\n        statusMessage = ''\n        error = false\n        seedChecksum = ''\n\n        content = content\n            .replace(/\\r/g, '')\n            .replace(/\\n/g, '')\n            .replace(/  +/g, ' ')\n\n        const trimmedContent = content.trim()\n\n        if (trimmedContent.length >= 3) {\n            const words = trimmedContent.split(' ')\n            if (type === Type.Seed) {\n                const seedValidations = isSeed(trimmedContent)\n                if (seedValidations) {\n                    statusMessage = seedValidations\n                    error = true\n                } else {\n                    statusMessage = locale('views.importFromText.seedDetected')\n                    value = trimmedContent\n                    seedChecksum = await asyncGetLegacySeedChecksum(value)\n                }\n            } else if (type === Type.Mnemonic) {\n                const mnemonicValidations = isMnemonic(words)\n                if (mnemonicValidations) {\n                    statusMessage = mnemonicValidations\n                    error = true\n                } else {\n                    try {\n                        await asyncVerifyMnemonic(trimmedContent)\n                        statusMessage = locale('views.importFromText.phraseDetected')\n                        value = trimmedContent\n                    } catch (err) {\n                        error = true\n                        statusMessage = locale(err.error)\n                    }\n                }\n            }\n        }\n    }\n</script>\n\n<style type=\"text/scss\">\n    textarea {\n        min-height: 200px;\n\n        &:disabled {\n           @apply pointer-events-none;\n           @apply opacity-50;\n        }\n    }\n</style>\n\n<div>\n    <textarea\n        {disabled}\n        class=\"text-14 leading-140 resize-none w-full p-4 pb-3 rounded-xl border border-solid {error ? 'border-red-300 hover:border-red-500 focus:border-red-500' : 'border-gray-300 hover:border-gray-500 dark:border-gray-700 dark:hover:border-gray-700'}\n        text-gray-500 dark:text-white bg-white dark:bg-gray-800 scroll-secondary\"\n        bind:value={content}\n        on:keydown={() => {\n            /* eslint-disable @typescript-eslint/no-misused-promises */\n            debounce(handleKeyDown)\n        }}\n        placeholder=\"\"\n        spellcheck={false}\n        autofocus />\n    <div class=\"flex flex-row items-start justify-between\">\n        <Text type=\"p\" secondary {error}>{statusMessage}&nbsp;</Text>\n        {#if seedChecksum}\n            <div class=\"flex flex-row items-center ml-2\">\n                <Text type=\"p\" secondary classes=\"mr-1\">{locale('views.importFromText.checksum')}:</Text>\n                <Text type=\"p\" highlighted>{seedChecksum}</Text>\n            </div>\n        {/if}\n    </div>\n</div>\n","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/inputs/Input.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/inputs/Number.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/inputs/Password.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/inputs/Pin.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/inputs/Radio.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/inputs/Toggle.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/modals/AccountActions.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/modals/Modal.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/modals/NetworkIndicator.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/modals/ProfileActions.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/modals/index.js",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/popups/AddNode.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/popups/AddressHistory.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/popups/Backup.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/popups/BalanceFinder.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/popups/Busy.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/popups/DeleteAccount.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/popups/DeleteProfile.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/popups/Diagnostics.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/popups/ErrorLog.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/popups/HideAccount.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/popups/Index.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/popups/LedgerAddress.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/popups/LedgerAppGuide.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/popups/LedgerConfirmation.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/popups/LedgerConnectionGuide.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/popups/LedgerLegacyTransaction.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/popups/LedgerMigrateIndex.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/popups/LedgerNotConnected.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/popups/LedgerTransaction.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/popups/MissingBundle.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/popups/Password.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/popups/QR.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/popups/RemoveNode.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/popups/RiskFunds.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/popups/Snapshot.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/popups/Transaction.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/popups/Version.svelte",["1030"],"<script lang=\"typescript\">\n    import { Button, Logo, Text } from 'shared/components'\n    import { getVersionDetails, updateBusy, updateCheck, updateDownload, versionDetails } from 'shared/lib/appUpdater'\n    import { closePopup } from 'shared/lib/popup'\n    import { onMount } from 'svelte'\n    import { formatDate } from 'shared/lib/i18n'\n    import { Electron } from 'shared/lib/electron';\n    import { Locale } from 'shared/lib/typings/i18n'\n\n    export let locale: Locale\n\n    let hasAutoUpdate = true\n\n    function handleDownload() {\n        if (hasAutoUpdate) {\n            updateDownload()\n        } else {\n            Electron.openUrl('https://firefly.iota.org')\n        }\n        closePopup()\n    }\n    function handleCancelClick() {\n        closePopup()\n    }\n\n    onMount(async () => {\n        // @ts-ignore: This value is replaced by Webpack DefinePlugin\n        /* eslint-disable no-undef */\n        if (!devMode) {\n            await getVersionDetails()\n            updateCheck()\n        }\n        const os = await Electron.getOS()\n        hasAutoUpdate = os !== 'win32'\n    })\n</script>\n\n<style type=\"text/scss\">\n    img {\n        width: 196px;\n    }\n    .changelog {\n        max-height: 50vh;\n    }\n</style>\n\n<Text type=\"h4\" classes=\"mb-5\">{locale('popups.version.title', { values: { version: $versionDetails.currentVersion } })}</Text>\n<div class=\"flex w-full flex-row flex-wrap\">\n    <div class=\"w-full p-4 bg-gray-50 dark:bg-gray-800 flex justify-center content-center\">\n        <Logo width=\"50%\" logo=\"logo-firefly-full\" />\n    </div>\n    {#if $versionDetails.upToDate}\n        <div class=\"w-full text-center my-6 px-8\">\n            <Text type=\"h5\" highlighted classes=\"mb-2\">{locale('popups.version.upToDateTitle')}</Text>\n            <Text smaller secondary>\n                {locale('popups.version.upToDateDescription', { values: { version: $versionDetails.currentVersion } })}\n            </Text>\n        </div>\n        <div class=\"flex flex-row justify-center w-full\">\n            <Button secondary onClick={() => handleCancelClick()}>{locale('actions.cancel')}</Button>\n        </div>\n    {:else}\n        <div class=\"my-6\">\n            <Text smaller highlighted classes=\"mb-2\">\n                {locale('popups.version.updateAvailable', { values: { version: $versionDetails.currentVersion } })}\n            </Text>\n            <Text type=\"h5\" classes=\"mb-2\">\n                {locale('popups.version.updateDetails', {\n                    values: {\n                        version: $versionDetails.newVersion,\n                        date: formatDate($versionDetails.newVersionReleaseDate, { format: 'long' }),\n                    },\n                })}\n            </Text>\n            <div class=\"changelog overflow-y-auto\">\n                <Text secondary classes=\"whitespace-pre-wrap\">{$versionDetails.changelog}</Text>\n            </div>\n            {#if !hasAutoUpdate}\n                <Text error classes=\"mt-4\">{locale('popups.version.noAutoUpdate')}</Text>\n            {/if}\n        </div>\n        <div class=\"flex flex-row justify-between space-x-4 w-full px-8\">\n            <Button secondary classes=\"w-1/2\" onClick={() => handleCancelClick()}>{locale('actions.cancel')}</Button>\n            <Button classes=\"w-1/2\" onClick={() => handleDownload()} disabled={$updateBusy}>\n                {locale('actions.updateFirefly')}\n            </Button>\n        </div>\n    {/if}\n</div>\n","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/components/popups/Video.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/actions.ts",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/app.ts",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/appSettings.ts",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/appUpdater.ts",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/bech32.ts",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/chart.ts",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/currency.ts",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/deepLinking.ts",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/electron.ts",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/errors.ts",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/helpers.ts",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/i18n.ts",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/ledger.ts",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/market.ts",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/migration.ts",["1031","1032"],"import { addEntry, finalizeBundle } from '@iota/bundle'\nimport { tritsToTrytes, trytesToTrits, valueToTrits } from '@iota/converter'\nimport { TRANSACTION_LENGTH } from '@iota/transaction'\nimport { asTransactionObject } from '@iota/transaction-converter'\nimport { closePopup, openPopup } from 'shared/lib/popup'\nimport { activeProfile, updateProfile } from 'shared/lib/profile'\nimport { appRoute, walletSetupType } from 'shared/lib/router'\nimport type { Address } from 'shared/lib/typings/address'\nimport type {\n    AddressInput,\n    Bundle,\n    HardwareIndexes,\n    Input,\n    MigrationAddress,\n    MigrationBundle,\n    MigrationData,\n    MigrationLog,\n    MigrationState,\n    SendMigrationBundleResponse,\n    Transfer,\n} from 'shared/lib/typings/migration'\nimport { AppRoute, SetupType } from 'shared/lib/typings/routes'\nimport Validator from 'shared/lib/validator'\nimport { api } from 'shared/lib/wallet'\nimport { derived, get, writable } from 'svelte/store'\nimport { localize } from './i18n'\nimport { showAppNotification } from './notifications'\nimport { LedgerMigrationProgress } from 'shared/lib/typings/migration'\nimport type { Event } from './typings/events'\n\nconst LEGACY_ADDRESS_WITHOUT_CHECKSUM_LENGTH = 81\n\nexport const LOG_FILE_NAME = 'migration.log'\n\nexport const MIGRATION_NODES = ['https://nodes.iota.org', 'https://nodes.iota.cafe']\nexport const PERMANODE = 'https://chronicle.iota.org/api'\n\nexport const ADDRESS_SECURITY_LEVEL = 2\n\n/** Minimum migration balance */\nexport const MINIMUM_MIGRATION_BALANCE = 1000000\n\n/** Bundle mining timeout for each bundle */\nexport const MINING_TIMEOUT_SECONDS = 10 * 60\n\n// TODO: Change back temp mwm (previously 9)\nexport const MINIMUM_WEIGHT_MAGNITUDE = 14\n\nconst SOFTWARE_MAX_INPUTS_PER_BUNDLE = 10\n\nconst HARDWARE_MAX_INPUTS_PER_BUNDLE = 3\n\nconst HARDWARE_ADDRESS_GAP = 3\n\nconst CHECKSUM_LENGTH = 9\n\nexport const removeAddressChecksum = (address: string = ''): string => address.slice(0, -CHECKSUM_LENGTH)\n\nexport const currentLedgerMigrationProgress = writable<LedgerMigrationProgress>(null)\nexport const ledgerMigrationProgresses = derived(currentLedgerMigrationProgress, (_currentLedgerMigrationProgress) => {\n    // had to add this here otherwise it gives error\n    const LEDGER_MIGRATION_PROGRESSES = [\n        {\n            title: localize('views.setupLedger.progress1'),\n            state: LedgerMigrationProgress.InstallLedgerApp,\n        },\n        {\n            title: localize('views.setupLedger.progress2'),\n            state: LedgerMigrationProgress.GenerateAddress,\n        },\n        {\n            title: localize('views.setupLedger.progress3'),\n            state: LedgerMigrationProgress.SwitchLedgerApp,\n        },\n        {\n            title: localize('views.setupLedger.progress4'),\n            state: LedgerMigrationProgress.TransferFunds,\n        },\n    ]\n    return LEDGER_MIGRATION_PROGRESSES.map((step, index) => ({\n        ...step,\n        ongoing: _currentLedgerMigrationProgress === index,\n        complete: index < _currentLedgerMigrationProgress,\n    }))\n})\n\nexport const LEDGER_MIGRATION_VIDEO = 'https://d17lo1ro77zjnd.cloudfront.net/firefly/videos/ledger_integration_v12.mp4'\n\n/*\n * Migration state\n */\nexport const migration = writable<MigrationState>({\n    didComplete: writable<boolean>(false),\n    data: writable<MigrationData>({\n        lastCheckedAddressIndex: 0,\n        balance: 0,\n        inputs: [],\n    }),\n    seed: writable<string>(null),\n    bundles: writable<Bundle[]>([]),\n})\n\nexport const didInitialiseMigrationListeners = writable<boolean>(false)\n\nexport const hardwareIndexes = writable<HardwareIndexes>({\n    accountIndex: 0,\n    pageIndex: 0,\n})\n\nexport const migrationLog = writable<MigrationLog[]>([])\n\n/*\n * ongoingSnapshot\n */\nexport const ongoingSnapshot = writable<boolean>(false)\n\nexport const createUnsignedBundle = (\n    outputAddress: string,\n    inputAddresses: string[],\n    value: number,\n    timestamp: number,\n    securityLevel = ADDRESS_SECURITY_LEVEL\n): string[] => {\n    let bundle = new Int8Array()\n    const issuanceTimestamp = valueToTrits(timestamp)\n\n    bundle = addEntry(bundle, {\n        address: trytesToTrits(outputAddress),\n        value: valueToTrits(value),\n        issuanceTimestamp,\n    })\n\n    inputAddresses.forEach((inputAddress) => {\n        // For every security level, create a new zero-value transaction to which you can later add the rest of the signature fragments\n        for (let i = 0; i < securityLevel; i++) {\n            bundle = addEntry(bundle, {\n                address: trytesToTrits(inputAddress),\n                value: valueToTrits(i == 0 ? -value : 0),\n                issuanceTimestamp,\n            })\n        }\n    })\n\n    bundle = finalizeBundle(bundle)\n\n    const bundleTrytes = []\n\n    for (let offset = 0; offset < bundle.length; offset += TRANSACTION_LENGTH) {\n        bundleTrytes.push(tritsToTrytes(bundle.subarray(offset, offset + TRANSACTION_LENGTH)))\n    }\n\n    return bundleTrytes\n}\n\n/**\n * Gets migration data and sets it to state\n *\n * @method getMigrationData\n *\n * @param {string} migrationSeed\n * @param {number} initialAddressIndex\n *\n * @returns {Promise<void}\n */\nexport const getMigrationData = (migrationSeed: string, initialAddressIndex = 0): Promise<void> =>\n    /* eslint-disable @typescript-eslint/no-misused-promises */\n    new Promise((resolve, reject) => {\n        if (get(ongoingSnapshot) === true) {\n            reject({ snapshot: true })\n            openSnapshotPopup()\n        } else {\n            api.getMigrationData(\n                migrationSeed,\n                MIGRATION_NODES,\n                ADDRESS_SECURITY_LEVEL,\n                initialAddressIndex,\n                PERMANODE,\n                {\n                    onSuccess(response) {\n                        const { seed, data } = get(migration)\n\n                        if (initialAddressIndex === 0) {\n                            seed.set(migrationSeed)\n                            data.set(response.payload)\n                        } else {\n                            data.update((_existingData) =>\n                                Object.assign({}, _existingData, {\n                                    balance: _existingData.balance + response.payload.balance,\n                                    inputs: [..._existingData.inputs, ...response.payload.inputs],\n                                    lastCheckedAddressIndex: response.payload.lastCheckedAddressIndex,\n                                })\n                            )\n                        }\n\n                        prepareBundles()\n\n                        resolve()\n                    },\n                    onError(error) {\n                        reject(error)\n                    },\n                }\n            )\n        }\n    })\n\n/**\n * Prepares migration log\n *\n * @method prepareMigrationLog\n *\n * @param {string} bundleHash\n * @param {string[]} trytes\n * @param {number} balance\n * @param [boolean] mine\n * @param [number] crackability\n *\n * @returns {void}\n */\nexport const prepareMigrationLog = (bundleHash: string, trytes: string[], balance: number): void => {\n    const transactionObjects = trytes.map((tryteString) => asTransactionObject(tryteString))\n    const { bundles } = get(migration)\n\n    const bundle = get(bundles).find((bundle) => bundle.bundleHash === bundleHash)\n    const spentInputs = bundle.inputs.filter((input) => input.spent === true)\n\n    const spentBundleHashes = []\n\n    spentInputs.forEach((input) => {\n        input.spentBundleHashes.forEach((bundleHash) => {\n            spentBundleHashes.push(bundleHash)\n        })\n    })\n\n    migrationLog.update((_log) => [\n        ..._log,\n        {\n            bundleHash: transactionObjects[0].bundle,\n            timestamp: new Date().toISOString(),\n            trytes,\n            receiveAddressTrytes: transactionObjects.find((tx) => tx.address.startsWith('TRANSFER')).address,\n            balance,\n            spentBundleHashes,\n            spentAddresses: bundle.inputs.filter((input) => input.spent === true).map((input) => input.address),\n            mine: bundle.miningRuns > 0,\n            crackability: bundle.crackability,\n        },\n    ])\n}\n\n/**\n * Gets migration data for ledger accounts\n *\n * @method getLedgerMigrationData\n *\n * @returns {Promise<void>}\n */\nexport const getLedgerMigrationData = (\n    getAddressFn: (index: number) => Promise<string>,\n    callback: () => void\n): Promise<unknown> => {\n    const _get = (addresses: AddressInput[]): Promise<unknown> =>\n        new Promise((resolve, reject) => {\n            api.getLedgerMigrationData(addresses, MIGRATION_NODES, PERMANODE, ADDRESS_SECURITY_LEVEL, {\n                onSuccess(response) {\n                    resolve(response)\n                },\n                onError(error) {\n                    reject(error)\n                },\n            })\n        })\n\n    const _generate = () => {\n        const { data } = get(migration)\n\n        return Array.from(Array(HARDWARE_ADDRESS_GAP), (_, i) => i).reduce((promise, index) => {\n            let idx = 0\n            const { lastCheckedAddressIndex } = get(data)\n            if (lastCheckedAddressIndex === 0) {\n                idx = index + lastCheckedAddressIndex\n            } else {\n                idx = index + lastCheckedAddressIndex + 1\n            }\n\n            return promise.then((acc) => getAddressFn(idx).then((address) => acc.concat({ address, index: idx })))\n        }, Promise.resolve([]))\n    }\n\n    const _process = () =>\n        _generate()\n            .then((addresses) => _get(addresses))\n            /* eslint-disable @typescript-eslint/no-explicit-any */\n            .then((response: any) => {\n                const { data } = get(migration)\n\n                if (get(data).lastCheckedAddressIndex === 0) {\n                    data.set(response.payload)\n                } else {\n                    data.update((_existingData) =>\n                        Object.assign({}, _existingData, {\n                            balance: _existingData.balance + response.payload.balance,\n                            inputs: [..._existingData.inputs, ...response.payload.inputs],\n                            lastCheckedAddressIndex: response.payload.lastCheckedAddressIndex,\n                        })\n                    )\n                }\n\n                prepareBundles()\n\n                const shouldGenerateMore =\n                    response.payload.spentAddresses === true ||\n                    response.payload.inputs.length > 0 ||\n                    response.payload.balance > 0\n\n                if (shouldGenerateMore) {\n                    return _process()\n                }\n\n                return Promise.resolve()\n            })\n\n    return _process().then(() => {\n        callback()\n        return get(get(migration).data)\n    })\n}\n\n/**\n * Find a particular migration bundle given its index\n *\n * @method findMigrationBundle\n *\n * @param {number} bundleIndex\n *\n * @returns {Bundle} The bundle whose index matches the one provided (undefined if no matches)\n */\nexport const findMigrationBundle = (bundleIndex: number): Bundle => {\n    const b = get(get(migration).bundles).find((b) => b.index === bundleIndex)\n    if (!b) {\n        const localePath = 'error.migration.missingBundle'\n        console.error(localePath)\n        showAppNotification({\n            type: 'error',\n            message: localize(localePath),\n        })\n    }\n\n    return b\n}\n\n/**\n * Mines ledger bundle\n *\n * @method mineLedgerBundle\n *\n * @param {number} bundleIndex\n * @param {number} offset\n *\n * @returns\n */\nexport const mineLedgerBundle = (bundleIndex: number, offset: number): Promise<void> =>\n    new Promise((resolve, reject) => {\n        api.getMigrationAddress(false, get(activeProfile).ledgerMigrationCount, {\n            onSuccess(response) {\n                resolve(response.payload)\n            },\n            onError(error) {\n                reject(error)\n            },\n        })\n    }).then((address: MigrationAddress) => {\n        const bundle = findMigrationBundle(bundleIndex)\n        const spentBundleHashes = []\n\n        bundle.inputs.forEach((input) => spentBundleHashes.push(...input.spentBundleHashes))\n\n        const unsignedBundle = createUnsignedBundle(\n            removeAddressChecksum(address.trytes),\n            bundle.inputs.map((input) => input.address),\n            bundle.inputs.reduce((acc, input) => acc + input.balance, 0),\n            Math.floor(Date.now() / 1000),\n            ADDRESS_SECURITY_LEVEL\n        )\n\n        return new Promise((resolve, reject) => {\n            api.mineBundle(\n                unsignedBundle.slice().reverse(),\n                spentBundleHashes,\n                ADDRESS_SECURITY_LEVEL,\n                MINING_TIMEOUT_SECONDS,\n                offset,\n                {\n                    onSuccess(response) {\n                        resolve(response.payload)\n                    },\n                    onError(error) {\n                        reject(error)\n                    },\n                }\n            )\n        }).then((payload) => {\n            // @ts-ignore\n            updateLedgerBundleState(bundleIndex, payload.bundle, true, payload.crackability)\n        })\n    })\n\n/**\n * Create mined ledger migration bundle\n *\n * @method createMinedLedgerMigrationBundle\n *\n * @param {number} bundleIndex\n * @param {function} prepareTransfersFn\n *\n * @returns {Promise<void>}\n */\nexport const createMinedLedgerMigrationBundle = (\n    bundleIndex: number,\n    prepareTransfersFn: (\n        transfers: Transfer[],\n        inputs: Input[],\n        remainder: undefined,\n        now: () => number\n    ) => Promise<string[]>,\n    callback: () => void\n): unknown => {\n    const bundle = findMigrationBundle(bundleIndex)\n    const txs = bundle.trytes.map((tryte) => asTransactionObject(tryte))\n    const transfer = bundle.trytes\n        .map((tryte) => asTransactionObject(tryte))\n        .reduce(\n            (acc, tx) => {\n                if (tx.address.startsWith('TRANSFER')) {\n                    acc.address = tx.address\n                    acc.value = tx.value\n                    acc.tag = tx.obsoleteTag\n                }\n\n                return acc\n            },\n            {\n                address: '',\n                value: 0,\n                tag: '',\n            }\n        )\n\n    const inputs = bundle.inputs.map((input) => {\n        const tags = txs\n            .filter((tx) => tx.address === input.address)\n            .sort((a, b) => a.value - b.value)\n            .map((tx) => tx.obsoleteTag)\n\n        return Object.assign({}, input, {\n            keyIndex: input.index,\n            tags,\n        })\n    })\n\n    openLedgerLegacyTransactionPopup(transfer, inputs)\n\n    return prepareTransfersFn([transfer], inputs, undefined, () => txs[0].timestamp * 1000).then((trytes) => {\n        updateLedgerBundleState(bundleIndex, trytes, false)\n        callback()\n        return { trytes, bundleHash: asTransactionObject(trytes[0]).bundle }\n    })\n}\n\n/**\n * Creates migration bundle for ledger\n *\n * @method createLedgerMigrationBundle\n *\n * @param {number} bundleIndex\n * @param {function} prepareTransfersFn\n *\n * @returns {Promise}\n */\nexport const createLedgerMigrationBundle = (\n    bundleIndex: number,\n    prepareTransfersFn: (transfers: Transfer[], inputs: Input[]) => Promise<string[]>,\n    callback: () => void\n): Promise<MigrationBundle> =>\n    new Promise((resolve, reject) => {\n        api.getMigrationAddress(false, get(activeProfile).ledgerMigrationCount, {\n            onSuccess(response) {\n                resolve(response.payload)\n            },\n            onError(error) {\n                reject(error)\n            },\n        })\n    }).then((address: MigrationAddress) => {\n        const bundle = findMigrationBundle(bundleIndex)\n        const transfer = {\n            address: address.trytes.toString(),\n            value: bundle.inputs.reduce((acc, input) => acc + input.balance, 0),\n            tag: 'U'.repeat(27),\n        }\n\n        openLedgerLegacyTransactionPopup(transfer, bundle.inputs)\n\n        return prepareTransfersFn(\n            [transfer],\n            bundle.inputs.map((input) => Object.assign({}, input, { keyIndex: input.index }))\n        ).then((trytes) => {\n            updateLedgerBundleState(bundleIndex, trytes, false)\n            callback()\n            return { trytes, bundleHash: asTransactionObject(trytes[0]).bundle }\n        })\n    })\n\n/**\n * Sends ledger migration bundle\n *\n * @method sendLedgerMigrationBundle\n *\n * @param {string[]} trytes\n *\n * @returns {Promise}\n */\nexport const sendLedgerMigrationBundle = (bundleHash: string, trytes: string[]): Promise<void> =>\n    new Promise((resolve, reject) => {\n        api.sendLedgerMigrationBundle(MIGRATION_NODES, trytes, MINIMUM_WEIGHT_MAGNITUDE, {\n            onSuccess(response) {\n                // Store migration log so that we can export it later\n                prepareMigrationLog(bundleHash, trytes, response.payload.value)\n\n                _sendMigrationBundle(bundleHash, response.payload)\n\n                resolve()\n            },\n            onError(error) {\n                reject(error)\n            },\n        })\n    })\n\n/**\n * Creates migration bundle\n *\n * @method createMigrationBundle\n *\n * @param {number[]} inputIndexes\n * @param {boolean} mine\n *\n * @returns {Promise}\n */\nexport const createMigrationBundle = (\n    inputAddressIndexes: number[],\n    offset: number,\n    mine: boolean\n): Promise<MigrationBundle> => {\n    const { seed } = get(migration)\n\n    return new Promise((resolve, reject) => {\n        api.createMigrationBundle(get(seed), inputAddressIndexes, mine, MINING_TIMEOUT_SECONDS, offset, LOG_FILE_NAME, {\n            onSuccess(response) {\n                assignBundleHash(inputAddressIndexes, response.payload, mine)\n                resolve(response.payload)\n            },\n            onError(error) {\n                reject(error)\n            },\n        })\n    })\n}\n\n/**\n * Signs and broadcast bundle to the (legacy) network\n *\n * @method sendMigrationBundle\n *\n * @param {string} bundleHash\n * @param {number} [mwm]\n *\n * @returns {Promise<void>}\n */\nexport const sendMigrationBundle = (bundleHash: string, mwm = MINIMUM_WEIGHT_MAGNITUDE): Promise<void> =>\n    new Promise((resolve, reject) => {\n        /* eslint-disable @typescript-eslint/no-misused-promises */\n        if (get(ongoingSnapshot) === true) {\n            reject({ snapshot: true })\n            openSnapshotPopup()\n        } else {\n            api.sendMigrationBundle(MIGRATION_NODES, bundleHash, mwm, {\n                onSuccess(response) {\n                    _sendMigrationBundle(bundleHash, response.payload)\n\n                    resolve()\n                },\n                onError(error) {\n                    reject(error)\n                },\n            })\n        }\n    })\n\nconst _sendMigrationBundle = (hash: string, data: SendMigrationBundleResponse): void => {\n    const { bundles } = get(migration)\n\n    // Update bundle and mark it as migrated\n    bundles.update((_bundles) =>\n        _bundles.map((bundle) => {\n            if (bundle.bundleHash === hash) {\n                return Object.assign({}, bundle, { migrated: true })\n            }\n\n            return bundle\n        })\n    )\n\n    // Persist these bundles in local storage\n    const _activeProfile = get(activeProfile)\n\n    const migratedTransaction = {\n        address: data.address,\n        balance: data.value,\n        tailTransactionHash: data.tailTransactionHash,\n        timestamp: new Date().toISOString(),\n        // Account index. Since we migrate funds to account at 0th index\n        account: 0,\n    }\n\n    updateProfile(\n        'migratedTransactions',\n        _activeProfile.migratedTransactions\n            ? [..._activeProfile.migratedTransactions, migratedTransaction]\n            : [migratedTransaction]\n    )\n}\n\n/**\n * Assigns bundle hash and crackability score to bundles\n *\n * @method assignBundleHash\n *\n * @param inputAddressIndexes\n * @param migrationBundle\n *\n * @returns {void}\n */\nexport const assignBundleHash = (\n    inputAddressIndexes: number[],\n    migrationBundle: MigrationBundle,\n    didMine: boolean\n): void => {\n    const { bundles } = get(migration)\n\n    bundles.update((_bundles) =>\n        _bundles.map((bundle) => {\n            const indexes = bundle.inputs.map((input) => input.index)\n            if (indexes.length && indexes.every((index) => inputAddressIndexes.includes(index))) {\n                const isNewCrackabilityScoreLowerThanPrevious =\n                    bundle.bundleHash && bundle.crackability && migrationBundle.crackability < bundle.crackability\n\n                // If bundle hash is already set, that means bundle mining has already been performed for this\n                if (bundle.bundleHash) {\n                    return Object.assign({}, bundle, {\n                        miningRuns: didMine ? bundle.miningRuns + 1 : bundle.miningRuns,\n                        bundleHash: isNewCrackabilityScoreLowerThanPrevious\n                            ? migrationBundle.bundleHash\n                            : bundle.bundleHash,\n                        crackability: isNewCrackabilityScoreLowerThanPrevious\n                            ? migrationBundle.crackability\n                            : bundle.crackability,\n                    })\n                }\n\n                return Object.assign({}, bundle, {\n                    miningRuns: didMine ? bundle.miningRuns + 1 : bundle.miningRuns,\n                    bundleHash: migrationBundle.bundleHash,\n                    crackability: migrationBundle.crackability,\n                })\n            }\n\n            return bundle\n        })\n    )\n}\n\n/**\n * Updates ledger bundle state\n *\n * @method updateLedgerBundleState\n *\n * @param {number} bundleIndex\n * @param {string[]} trytes\n * @param {boolean} didMine\n * @param [number] migrationBundleCrackability\n *\n * @returns {void}\n */\nexport const updateLedgerBundleState = (\n    bundleIndex: number,\n    trytes: string[],\n    didMine: boolean,\n    migrationBundleCrackability?: number\n): void => {\n    const { bundles } = get(migration)\n\n    bundles.update((_bundles) =>\n        _bundles.map((bundle) => {\n            if (bundle.index === bundleIndex) {\n                const newBundleHash = asTransactionObject(trytes[0]).bundle\n\n                if (bundle.miningRuns > 0) {\n                    const isNewCrackabilityScoreLowerThanPrevious =\n                        bundle.bundleHash && bundle.crackability && migrationBundleCrackability < bundle.crackability\n\n                    return Object.assign({}, bundle, {\n                        trytes: isNewCrackabilityScoreLowerThanPrevious ? trytes : bundle.trytes,\n                        miningRuns: didMine ? bundle.miningRuns + 1 : bundle.miningRuns,\n                        bundleHash: isNewCrackabilityScoreLowerThanPrevious ? newBundleHash : bundle.bundleHash,\n                        crackability: isNewCrackabilityScoreLowerThanPrevious\n                            ? migrationBundleCrackability\n                            : bundle.crackability,\n                    })\n                }\n\n                return Object.assign({}, bundle, {\n                    trytes,\n                    miningRuns: didMine ? bundle.miningRuns + 1 : bundle.miningRuns,\n                    bundleHash: newBundleHash,\n                    crackability: migrationBundleCrackability,\n                })\n            }\n\n            return bundle\n        })\n    )\n}\n\n/**\n * Prepares inputs (as bundles) for unspent addresses.\n * Steps:\n *   - Categorises inputs in two groups 1) inputs with balance >= MINIMUM_MIGRATION_BALANCE 2) inputs with balance < MINIMUM_MIGRATION_BALANCE\n *   - Creates chunks of category 1 input addresses such that length of each chunk should not exceed MAX_INPUTS_PER_BUNDLE\n *   - For category 2:\n *         - Sort the inputs in descending order based on balance;\n *         - Pick first N inputs (where N = MAX_INPUTS_PER_BUNDLE) and see if their accumulative balance >= MINIMUM_MIGRATION_BALANCE\n *         - If yes, then repeat the process for next N inputs. Otherwise, iterate on the remaining inputs and add it to a chunk that has space for more inputs\n *         - If there's no chunk with space left, then ignore these funds. NOTE THAT THESE FUNDS WILL ESSENTIALLY BE LOST!\n *\n * NOTE: If the total sum of provided inputs are less than MINIMUM_MIGRATION_BALANCE, then this method will just return and empty array as those funds can't be migrated.\n *\n * This method gives precedence to max inputs over funds. It ensures, a maximum a bundle could have is 30 inputs and their accumulative balance >= MINIMUM_MIGRATION_BALANCE\n *\n * @method selectInputsForUnspentAddresses\n *\n * @params {Input[]} inputs\n *\n * @returns {Input[][]}\n */\nconst selectInputsForUnspentAddresses = (inputs: Input[]): Input[][] => {\n    const MAX_INPUTS_PER_BUNDLE =\n        get(walletSetupType) === SetupType.TrinityLedger\n            ? HARDWARE_MAX_INPUTS_PER_BUNDLE\n            : SOFTWARE_MAX_INPUTS_PER_BUNDLE\n\n    const totalInputsBalance: number = inputs.reduce((acc, input) => acc + input.balance, 0)\n\n    // If the total sum of unspent addresses is less than MINIMUM MIGRATION BALANCE, just return an empty array as these funds cannot be migrated\n    if (totalInputsBalance < MINIMUM_MIGRATION_BALANCE) {\n        return []\n    }\n\n    const { inputsWithEnoughBalance, inputsWithLowBalance } = inputs.reduce(\n        (acc, input) => {\n            if (input.balance >= MINIMUM_MIGRATION_BALANCE) {\n                acc.inputsWithEnoughBalance.push(input)\n            } else {\n                acc.inputsWithLowBalance.push(input)\n            }\n\n            return acc\n        },\n        { inputsWithEnoughBalance: [], inputsWithLowBalance: [] }\n    )\n\n    let chunks = inputsWithEnoughBalance.reduce((acc, input, index) => {\n        const chunkIndex = Math.floor(index / MAX_INPUTS_PER_BUNDLE)\n\n        if (!acc[chunkIndex]) {\n            acc[chunkIndex] = [] // start a new chunk\n        }\n\n        acc[chunkIndex].push(input)\n\n        return acc\n    }, [])\n\n    const fill = (_inputs) => {\n        _inputs.every((input) => {\n            const chunkIndexWithSpaceForInput = chunks.findIndex((chunk) => chunk.length < MAX_INPUTS_PER_BUNDLE)\n\n            if (chunkIndexWithSpaceForInput > -1) {\n                chunks = chunks.map((chunk, idx) => {\n                    if (idx === chunkIndexWithSpaceForInput) {\n                        return [...chunk, input]\n                    }\n\n                    return chunk\n                })\n\n                return true\n            }\n\n            // If there is no space, then exit\n            return false\n        })\n    }\n\n    const totalBalanceOnInputsWithLowBalance: number = inputsWithLowBalance.reduce(\n        (acc, input) => acc + input.balance,\n        0\n    )\n\n    // If all the remaining input addresses have accumulative balance less than the minimum migration balance,\n    // Then sort the inputs in descending order and try to pair the\n    if (totalBalanceOnInputsWithLowBalance < MINIMUM_MIGRATION_BALANCE) {\n        const sorted = inputsWithLowBalance.slice().sort((a, b) => b.balance - a.balance)\n\n        fill(sorted)\n    } else {\n        let startIndex = 0\n\n        const sorted = inputsWithLowBalance.slice().sort((a, b) => b.balance - a.balance)\n        const max = Math.ceil(sorted.length / MAX_INPUTS_PER_BUNDLE)\n\n        while (startIndex < max) {\n            const inputsSubset = sorted.slice(\n                startIndex * MAX_INPUTS_PER_BUNDLE,\n                (startIndex + 1) * MAX_INPUTS_PER_BUNDLE\n            )\n            const balanceOnInputsSubset = inputsSubset.reduce((acc, input) => acc + input.balance, 0)\n\n            if (balanceOnInputsSubset >= MINIMUM_MIGRATION_BALANCE) {\n                chunks = [...chunks, inputsSubset]\n            } else {\n                fill(inputsSubset)\n            }\n\n            startIndex++\n        }\n    }\n\n    return chunks\n}\n\n/**\n * Prepares bundles from inputs\n *\n * @method prepareBundles\n *\n * @returns {void}\n */\nexport const prepareBundles = (): void => {\n    const { data, bundles } = get(migration)\n\n    const { inputs } = get(data)\n\n    // Categorise spent vs unspent inputs\n    const { spent, unspent } = inputs.reduce(\n        (acc, input) => {\n            if (input.spent) {\n                acc.spent.push(input)\n            } else {\n                acc.unspent.push(input)\n            }\n\n            return acc\n        },\n        { spent: [], unspent: [] }\n    )\n\n    const unspentInputChunks = selectInputsForUnspentAddresses(unspent)\n    const spentInputs = spent.filter((input) => input.balance >= MINIMUM_MIGRATION_BALANCE)\n\n    const _shouldMine = (input) => input.spentBundleHashes && input.spentBundleHashes.length > 0\n\n    bundles.set(\n        [\n            ...spentInputs.map((input) => ({\n                confirmed: false,\n                miningRuns: 0,\n                migrated: false,\n                selected: true,\n                shouldMine: _shouldMine(input),\n                selectedToMine: true,\n                inputs: [input],\n            })),\n            ...unspentInputChunks.map((inputs) => ({\n                confirmed: false,\n                miningRuns: 0,\n                migrated: false,\n                selected: true,\n                shouldMine: false,\n                selectedToMine: false,\n                inputs,\n            })),\n        ].map((_, index) => ({ ..._, index }))\n    )\n}\n\n/**\n * Gets input indexes for all addresses / inputs in a bundle\n *\n * @method getInputIndexesForBundle\n *\n * @param {Bundle} bundle\n *\n * @returns {number[]}\n */\nexport const getInputIndexesForBundle = (bundle: Bundle): number[] => {\n    const { inputs } = bundle\n\n    return inputs.map((input) => input.index)\n}\n\n/**\n * Get all spent addresses from bundles\n */\nexport const spentAddressesFromBundles = derived(get(migration).bundles, (_bundles) =>\n    _bundles\n        .filter((bundle) => bundle.migrated === false && bundle.shouldMine === true)\n        .map((bundle) =>\n            Object.assign({}, bundle.inputs[0], {\n                selectedToMine: bundle.selectedToMine,\n                bundleHash: bundle.bundleHash,\n                crackability: bundle.crackability,\n            })\n        )\n)\n\n/**\n * Determines if we only have a single bundle to migrate\n */\nexport const hasSingleBundle = derived(\n    get(migration).bundles,\n    (_bundles) => _bundles.length === 1 && _bundles[0].selected === true\n)\n\n/**\n * Determines if we have bundles with spent addresses\n */\nexport const hasBundlesWithSpentAddresses = derived(\n    get(migration).bundles,\n    (_bundles) => _bundles.length && _bundles.some((bundle) => bundle.shouldMine === true && bundle.selected === true)\n)\n\n/**\n * Toggles mining selection\n *\n * @method toggleMiningSelection\n *\n * @param {Address} address\n *\n * @returns {void}\n */\nexport const toggleMiningSelection = (address: Address): void => {\n    const { bundles } = get(migration)\n\n    bundles.update((_bundles) =>\n        _bundles.map((bundle) => {\n            if (bundle.inputs.some((input) => input.address === address.address)) {\n                return Object.assign({}, bundle, { selectedToMine: !bundle.selectedToMine })\n            }\n\n            return bundle\n        })\n    )\n}\n\n/**\n * Selects all addresses for mining\n *\n * @method selectAllAddressesForMining\n *\n * @returns {void}\n */\nexport const selectAllAddressesForMining = (): void => {\n    const { bundles } = get(migration)\n    bundles.update((_bundles) =>\n        _bundles.map((bundle) => {\n            if (bundle.shouldMine) {\n                return Object.assign({}, bundle, { selectedtoMine: true })\n            }\n            return bundle\n        })\n    )\n}\n\n/**\n * Resets migration state\n *\n * @method resetMigrationState\n *\n * @returns {void}\n */\nexport const resetMigrationState = (): void => {\n    const { didComplete, data, seed, bundles } = get(migration)\n    didComplete.set(false)\n    data.set({\n        lastCheckedAddressIndex: 0,\n        balance: 0,\n        inputs: [],\n    })\n    seed.set(null)\n    bundles.set([])\n}\n\n/**\n * All selected bundles for mining\n */\nexport const selectedBundlesToMine = derived(get(migration).bundles, (_bundles) =>\n    _bundles.filter((bundle) => bundle.selectedToMine === true && bundle.shouldMine === true)\n)\n\n/**\n * All selected bundles that are yet to migrate\n */\nexport const unmigratedBundles = derived(get(migration).bundles, (_bundles) =>\n    _bundles.filter((bundle) => bundle.selected === true && bundle.migrated === false)\n)\n\n/**\n * Determines if we have migrated all bundles\n */\nexport const hasMigratedAllBundles = derived(\n    get(migration).bundles,\n    (_bundles) => _bundles.length && _bundles.every((bundle) => bundle.selected === true && bundle.migrated === true)\n)\n\n/**\n * Determines if we have migrated any bundle\n */\nexport const hasMigratedAnyBundle = derived(get(migration).bundles, (_bundles) =>\n    _bundles.some((bundle) => bundle.selected === true && bundle.migrated === true)\n)\n\n/**\n * Determines if we have migrated all selected bundles\n */\nexport const hasMigratedAllSelectedBundles = derived(get(migration).bundles, (_bundles) => {\n    const selectedBundles = _bundles.filter((bundle) => bundle.selected === true)\n\n    return selectedBundles.length && selectedBundles.every((bundle) => bundle.migrated === true)\n})\n\n/**\n * Determines if all migrated bundles are confirmed\n */\nexport const hasMigratedAndConfirmedAllSelectedBundles = derived(get(migration).bundles, (_bundles) => {\n    const selectedBundles = _bundles.filter((bundle) => bundle.selected === true)\n\n    return (\n        selectedBundles.length &&\n        selectedBundles.every((bundle) => bundle.migrated === true && bundle.confirmed === true)\n    )\n})\n\n/**\n * Total migration balance\n */\nexport const totalMigratedBalance = derived(get(migration).bundles, (_bundles) =>\n    _bundles.reduce((acc, bundle) => {\n        if (bundle.selected && bundle.migrated) {\n            return acc + bundle.inputs.reduce((_acc, input) => _acc + input.balance, 0)\n        }\n\n        return acc\n    }, 0)\n)\n\n/**\n * Determines if all spent addresses have low (less than MINIMUM MIGRATION) balance\n */\nexport const hasLowBalanceOnAllSpentAddresses = derived(get(migration).bundles, (_bundles) => {\n    const bundlesWithSpentAddresses = _bundles.filter((bundle) => bundle.shouldMine === true)\n\n    return (\n        bundlesWithSpentAddresses.length &&\n        bundlesWithSpentAddresses.every((bundle) =>\n            bundle.inputs.every((input) => input.balance < MINIMUM_MIGRATION_BALANCE)\n        )\n    )\n})\n\n/**\n * Bundles with unspent addresses as inputs\n */\nexport const bundlesWithUnspentAddresses = derived(get(migration).bundles, (_bundles) =>\n    _bundles.filter((bundle) => bundle.selected === true && bundle.shouldMine === false)\n)\n\n/**\n * Determines if there is any spent address with associated (previous) bundle hashes\n */\nexport const hasAnySpentAddressWithNoBundleHashes = derived(\n    get(migration).bundles,\n    (_bundles) =>\n        _bundles.length &&\n        _bundles.some((bundle) =>\n            bundle.inputs.some(\n                (input) =>\n                    input.spent &&\n                    ((Array.isArray(input.spentBundleHashes) && !input.spentBundleHashes.length) ||\n                        input.spentBundleHashes === null)\n            )\n        )\n)\n\n/**\n * All spent address that have no bundle hashes\n */\nexport const spentAddressesWithNoBundleHashes = derived([get(migration).data, get(migration).bundles], ([data]) =>\n    data.inputs.filter(\n        (input) =>\n            input.spent &&\n            input.balance >= MINIMUM_MIGRATION_BALANCE &&\n            ((Array.isArray(input.spentBundleHashes) && !input.spentBundleHashes.length) ||\n                input.spentBundleHashes === null)\n    )\n)\n\n/**\n * Inputs that were not selected for migration (have low balance)\n */\nexport const unselectedInputs = derived([get(migration).data, get(migration).bundles], ([data, bundles]) =>\n    data.inputs.filter(\n        (input) => !bundles.some((bundle) => bundle.inputs.some((bundleInput) => bundleInput.address === input.address))\n    )\n)\n\n/**\n * All confirmed bundles\n */\nexport const confirmedBundles = derived(get(migration).bundles, (_bundles) =>\n    _bundles.filter((bundle) => bundle.selected === true && bundle.confirmed === true)\n)\n\nconst CHRYSALIS_VARIABLES_ENDPOINT =\n    'https://raw.githubusercontent.com/iotaledger/firefly/develop/packages/shared/lib/chrysalis.json'\nconst DEFAULT_CHRYSALIS_VARIABLES_ENDPOINT_TIMEOUT = 5000\nconst DEFAULT_CHRYSALIS_VARIABLES_POLL_INTERVAL = 60000 // 1 minute\n\ntype ChrysalisVariables = {\n    snapshot: boolean\n}\n\nexport type ChrysalisVariablesValidationResponse = {\n    type: 'ChrysalisVariables'\n    payload: ChrysalisVariables\n}\n\n/**\n * Fetches Chrysalis snapshot state\n *\n * @method checkChrysalisSnapshot\n *\n * @returns {Promise<void>}\n */\nexport async function checkChrysalisSnapshot(): Promise<void> {\n    const requestOptions: RequestInit = {\n        headers: {\n            Accept: 'application/json',\n        },\n    }\n    const endpoint = CHRYSALIS_VARIABLES_ENDPOINT\n    try {\n        const abortController = new AbortController()\n        const timerId = setTimeout(() => {\n            if (abortController) {\n                abortController.abort()\n            }\n        }, DEFAULT_CHRYSALIS_VARIABLES_ENDPOINT_TIMEOUT)\n\n        requestOptions.signal = abortController.signal\n\n        const response = await fetch(endpoint, requestOptions)\n\n        clearTimeout(timerId)\n\n        const jsonResponse: ChrysalisVariables = await response.json()\n\n        const { isValid, payload } = new Validator().performValidation({\n            type: 'ChrysalisVariables',\n            payload: jsonResponse,\n        })\n        if (isValid) {\n            const _ongoingSnapshot = jsonResponse.snapshot\n            if (get(ongoingSnapshot) === true && _ongoingSnapshot === false) {\n                // snapshot finished\n                closePopup()\n            }\n            ongoingSnapshot.set(_ongoingSnapshot)\n        } else {\n            throw new Error(payload.error)\n        }\n    } catch (err) {\n        console.error(err.name === 'AbortError' ? new Error(`Could not fetch from ${endpoint}.`) : err)\n    }\n}\n\n/**\n * Poll the Chrysalis snapshot state at an interval\n */\nexport async function pollChrysalisSnapshot(stopPoll: boolean = true): Promise<void> {\n    await checkChrysalisSnapshot()\n    /* eslint-disable @typescript-eslint/no-misused-promises */\n    setInterval(async () => checkChrysalisSnapshot(), DEFAULT_CHRYSALIS_VARIABLES_POLL_INTERVAL)\n}\n\nexport function openSnapshotPopup(): void {\n    openPopup({\n        type: 'snapshot',\n        hideClose: true,\n        props: {\n            dashboard: get(appRoute) === AppRoute.Dashboard || get(appRoute) === AppRoute.Login,\n        },\n    })\n}\n\n/**\n * Initialise migration process listeners\n */\nexport const initialiseMigrationListeners = (): void => {\n    if (get(didInitialiseMigrationListeners) === false) {\n        didInitialiseMigrationListeners.set(true)\n        api.onMigrationProgress({\n            onSuccess(response) {\n                if (response.payload.event.type === 'TransactionConfirmed') {\n                    const { bundles } = get(migration)\n\n                    bundles.update((_bundles) =>\n                        _bundles.map((bundle) => {\n                            // @ts-ignore\n                            if (bundle.bundleHash && bundle.bundleHash === response.payload.event.data.bundleHash) {\n                                return Object.assign({}, bundle, { confirmed: true })\n                            }\n\n                            return bundle\n                        })\n                    )\n                }\n            },\n            onError(error) {\n                console.error(error)\n            },\n        })\n    }\n}\n\nexport const asyncGetAddressChecksum = (address: string = '', legacy: boolean = false): Promise<string> => {\n    const _checksum = (_address: string = '') => _address.slice(-CHECKSUM_LENGTH)\n    return new Promise<string>((resolve, reject) => {\n        if (legacy || address.length === LEGACY_ADDRESS_WITHOUT_CHECKSUM_LENGTH) {\n            api.getLegacyAddressChecksum(address, {\n                onSuccess(response) {\n                    const checksum = _checksum(response.payload)\n                    resolve(checksum)\n                },\n                onError(err) {\n                    reject(err)\n                },\n            })\n        } else {\n            const checksum = _checksum(address)\n            resolve(checksum)\n        }\n    })\n}\n\nfunction openLedgerLegacyTransactionPopup(transfer: Transfer, inputs: Input[]): void {\n    openPopup({\n        type: 'ledgerLegacyTransaction',\n        hideClose: true,\n        preventClose: true,\n        props: {\n            transfer,\n            inputs,\n        },\n    })\n}\n","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/network.ts",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/networkStatus.ts",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/notifications.ts",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/password.ts",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/popup.ts",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/profile.ts",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/router.ts",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/shell/errorLogger.ts",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/shell/walletApi.ts",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/shell/walletErrors.ts",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/typings/account.ts",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/typings/address.ts",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/typings/app.ts",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/typings/bridge.ts",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/typings/chart.ts",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/typings/client.ts",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/typings/currency.ts",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/typings/error.ts",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/typings/events.ts",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/typings/i18n.ts",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/typings/icons.ts",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/typings/index.ts",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/typings/ledger.ts",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/typings/market.ts",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/typings/message.ts",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/typings/migration.ts",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/typings/mnemonic.ts",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/typings/network.ts",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/typings/node.ts",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/typings/notification.ts",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/typings/profile.ts",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/typings/routes.ts",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/typings/utils.ts",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/typings/validator.ts",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/typings/wallet.ts",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/units.ts",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/utils.ts",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/validator.ts",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/wallet.ts",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/lib/wordlists/english.ts",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/Splash.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/dashboard/Dashboard.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/dashboard/settings/Settings.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/dashboard/settings/views/Advanced.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/dashboard/settings/views/General.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/dashboard/settings/views/Help.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/dashboard/settings/views/Security.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/dashboard/settings/views/SettingsHome.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/dashboard/settings/views/SettingsViewer.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/dashboard/settings/views/index.js",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/dashboard/wallet/Wallet.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/dashboard/wallet/views/Account.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/dashboard/wallet/views/AccountActions.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/dashboard/wallet/views/AccountBalance.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/dashboard/wallet/views/AccountHistory.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/dashboard/wallet/views/AccountNavigation.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/dashboard/wallet/views/BarChart.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/dashboard/wallet/views/CreateAccount.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/dashboard/wallet/views/LineChart.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/dashboard/wallet/views/ManageAccount.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/dashboard/wallet/views/Receive.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/dashboard/wallet/views/Security.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/dashboard/wallet/views/Send.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/dashboard/wallet/views/WalletActions.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/dashboard/wallet/views/WalletBalance.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/dashboard/wallet/views/WalletHistory.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/dashboard/wallet/views/index.js",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/index.js",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/login/Login.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/login/views/EnterPin.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/login/views/SelectProfile.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/login/views/index.js",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/Appearance.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/Balance.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/Congratulations.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/Create.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/Legal.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/Password.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/Profile.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/Secure.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/Setup.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/Welcome.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/backup/Backup.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/backup/views/Backup.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/backup/views/BackupToFile.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/backup/views/RecoveryPhrase.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/backup/views/VerifyRecoveryPhrase.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/backup/views/index.js",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/import/Import.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/import/views/BackupPassword.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/import/views/FileImport.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/import/views/Import.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/import/views/Ledger.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/import/views/Success.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/import/views/TextImport.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/import/views/index.js",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/ledger/Ledger.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/ledger/views/AccountIndex.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/ledger/views/Connect.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/ledger/views/GenerateNewAddress.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/ledger/views/InstallationGuide.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/ledger/views/LegacyIntro.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/ledger/views/RestoreFromLedger.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/ledger/views/SwitchApps.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/ledger/views/index.js",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/migrate/Migrate.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/migrate/views/BundleMiningWarning.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/migrate/views/Migrate.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/migrate/views/SecureSpentAddresses.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/migrate/views/SecuringSpentAddresses.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/migrate/views/SecurityCheckCompleted.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/migrate/views/TransferFragmentedFunds.svelte",["1033","1034"],"<script lang=\"typescript\">\n    import { Animation, Button, OnboardingLayout, Spinner, Text, TransactionItem } from 'shared/components'\n    import { Electron } from 'shared/lib/electron'\n    import { displayNotificationForLedgerProfile, ledgerDeviceState, promptUserToConnectLedger } from 'shared/lib/ledger'\n    import {\n        ADDRESS_SECURITY_LEVEL,\n        confirmedBundles,\n        createLedgerMigrationBundle,\n        createMigrationBundle,\n        createMinedLedgerMigrationBundle,\n        getInputIndexesForBundle,\n        hardwareIndexes,\n        hasMigratedAndConfirmedAllSelectedBundles,\n        hasMigratedAnyBundle,\n        migration,\n        sendLedgerMigrationBundle,\n        sendMigrationBundle,\n        unmigratedBundles,\n    } from 'shared/lib/migration'\n    import { closePopup, popupState } from 'shared/lib/popup'\n    import { newProfile, profileInProgress, saveProfile, setActiveProfile } from 'shared/lib/profile'\n    import { walletSetupType } from 'shared/lib/router'\n    import { LedgerAppName, LedgerDeviceState } from 'shared/lib/typings/ledger'\n    import { SetupType } from 'shared/lib/typings/routes'\n    import { createEventDispatcher, onDestroy } from 'svelte'\n    import { get } from 'svelte/store'\n    import { Locale } from 'shared/lib/typings/i18n'\n\n    export let locale: Locale\n\n    export let mobile\n\n    let busy = false\n    let migrated = false\n    let migratingFundsMessage = ''\n    let fullSuccess = $hasMigratedAndConfirmedAllSelectedBundles\n\n    const legacyLedger = $walletSetupType === SetupType.TrinityLedger\n    $: animation = legacyLedger ? 'ledger-migrate-desktop' : 'migrate-desktop'\n\n    let closeTransport = () => {}\n\n    let hasBroadcastAnyBundle = false\n\n    const { didComplete } = $migration\n\n    let transactions = get(unmigratedBundles).map((_bundle, index) => ({\n        ..._bundle,\n        name: locale('views.transferFragmentedFunds.transaction', { values: { number: index + 1 } }),\n        balance: _bundle.inputs.reduce((acc, input) => acc + input.balance, 0),\n        status: 0,\n        errorText: null,\n    }))\n\n    $: if (\n        legacyLedger &&\n        busy &&\n        $ledgerDeviceState !== LedgerDeviceState.LegacyConnected &&\n        transactions.every((tx) => tx.status !== 1)\n    ) {\n        migrated = true\n        busy = false\n    }\n\n    const unsubscribe = hasMigratedAndConfirmedAllSelectedBundles.subscribe((_hasMigratedAndConfirmedAllSelectedBundles) => {\n        fullSuccess = _hasMigratedAndConfirmedAllSelectedBundles\n\n        migrated = _hasMigratedAndConfirmedAllSelectedBundles\n\n        if (_hasMigratedAndConfirmedAllSelectedBundles) {\n            migratingFundsMessage = locale('actions.continue')\n            busy = false\n        }\n    })\n\n    let migratedAndUnconfirmedBundles = []\n\n    // TODO: add missing unsubscribe to onDestroy\n    confirmedBundles.subscribe((newConfirmedBundles) => {\n        newConfirmedBundles.forEach((bundle) => {\n            if (bundle.bundleHash && bundle.confirmed) {\n                migratedAndUnconfirmedBundles = migratedAndUnconfirmedBundles.filter(\n                    (bundleHash) => bundleHash !== bundle.bundleHash\n                )\n\n                transactions = transactions.map((item) => {\n                    if (item.bundleHash === bundle.bundleHash) {\n                        return { ...item, status: 2 }\n                    }\n\n                    return item\n                })\n            }\n        })\n    })\n\n    const dispatch = createEventDispatcher()\n\n    function handleBackClick() {\n        if (!busy) {\n            dispatch('previous')\n        }\n    }\n\n    function handleContinueClick() {\n        didComplete.set(true)\n        dispatch('next')\n    }\n\n    function handleRerunClick() {\n        if (legacyLedger) {\n            const _onConnected = () => rerunMigration()\n            promptUserToConnectLedger(true, _onConnected)\n        } else {\n            rerunMigration()\n        }\n    }\n\n    function setMigratingTransaction(transaction, status) {\n        busy = true\n        migrated = false\n        transactions = transactions.map((_transaction, i) => {\n            if (_transaction.index === transaction.index) {\n                return { ..._transaction, status }\n            }\n\n            return _transaction\n        })\n    }\n\n    function rerunMigration() {\n        const _unmigratedBundles = $unmigratedBundles\n        const unmigratedBundleIndexes = _unmigratedBundles.map((_bundle) => _bundle.index)\n\n        transactions = transactions.map((item) => {\n            if (unmigratedBundleIndexes.includes(item.index)) {\n                return { ...item, status: 0, errorText: null }\n            }\n\n            return item\n        })\n        migratingFundsMessage = locale('views.migrate.migrating')\n\n        _unmigratedBundles.reduce(\n            (promise, transaction, idx) =>\n                // @ts-ignore\n                promise\n                    .then((acc) => {\n                        if (legacyLedger) {\n                            if (transaction.trytes && transaction.trytes.length) {\n                                return Electron.ledger\n                                    .selectSeed($hardwareIndexes.accountIndex, $hardwareIndexes.pageIndex, ADDRESS_SECURITY_LEVEL)\n                                    .then(({ iota, callback }) => {\n                                        closeTransport = callback\n                                        return createMinedLedgerMigrationBundle(\n                                            transaction.index,\n                                            iota.prepareTransfers,\n                                            callback\n                                        )\n                                    })\n                                    .then(({ trytes, bundleHash }) => {\n                                        closePopup(true) // close transaction popup\n                                        setMigratingTransaction(transaction, 1)\n                                        return sendLedgerMigrationBundle(bundleHash, trytes)\n                                    })\n                                    .then(() => {\n                                        migratedAndUnconfirmedBundles = [...migratedAndUnconfirmedBundles, transaction.bundleHash]\n                                    })\n                            }\n\n                            return Electron.ledger\n                                .selectSeed($hardwareIndexes.accountIndex, $hardwareIndexes.pageIndex, ADDRESS_SECURITY_LEVEL)\n                                .then(({ iota, callback }) => {\n                                    closeTransport = callback\n                                    return createLedgerMigrationBundle(transaction.index, iota.prepareTransfers, callback)\n                                })\n                                .then(({ trytes, bundleHash }) => {\n                                    closePopup(true) // close transaction popup\n                                    setMigratingTransaction(transaction, 1)\n                                    transactions = transactions.map((_transaction) => {\n                                        if (_transaction.index === transaction.index) {\n                                            return { ..._transaction, bundleHash }\n                                        }\n\n                                        return _transaction\n                                    })\n\n                                    return sendLedgerMigrationBundle(bundleHash, trytes).then(() => {\n                                        migratedAndUnconfirmedBundles = [...migratedAndUnconfirmedBundles, bundleHash]\n                                    })\n                                })\n                        }\n\n                        if (transaction.bundleHash) {\n                            setMigratingTransaction(transaction, 1)\n\n                            return sendMigrationBundle(transaction.bundleHash).then(() => {\n                                migratedAndUnconfirmedBundles = [...migratedAndUnconfirmedBundles, transaction.bundleHash]\n                            })\n                        }\n\n                        return createMigrationBundle(getInputIndexesForBundle(transaction), 0, false).then((data) => {\n                            setMigratingTransaction(transaction, 1)\n                            transactions = transactions.map((_transaction) => {\n                                if (_transaction.index === transaction.index) {\n                                    return { ..._transaction, bundleHash: data.bundleHash }\n                                }\n\n                                return _transaction\n                            })\n\n                            return sendMigrationBundle(data.bundleHash).then(() => {\n                                migratedAndUnconfirmedBundles = [...migratedAndUnconfirmedBundles, data.bundleHash]\n                            })\n                        })\n                    })\n                    .catch((error) => {\n                        console.error(error)\n\n                        if (legacyLedger) {\n                            closePopup(true) // close transaction popup\n                            closeTransport()\n                            displayNotificationForLedgerProfile('error', false, true, false, true, error)\n                        }\n\n                        transactions = transactions.map((_transaction, i) => {\n                            if (_transaction.index === transaction.index) {\n                                return { ..._transaction, status: -1, errorText: locale('views.migrate.migrationFailed') }\n                            }\n\n                            return _transaction\n                        })\n\n                        if (\n                            idx === _unmigratedBundles.length - 1 &&\n                            _unmigratedBundles.every((bundle) => {\n                                const tx = transactions.find((tx) => tx.index === bundle.index)\n\n                                return tx.status !== 0\n                            })\n                        ) {\n                            migrated = true\n                            busy = false\n                        }\n                    }),\n            Promise.resolve([])\n        )\n    }\n\n    function persistProfile() {\n        if (legacyLedger && !$newProfile) {\n            return\n        }\n\n        // When the first migration bundle is broadcast, then persist profile\n\n        saveProfile($newProfile)\n        setActiveProfile($newProfile.id)\n\n        profileInProgress.set(undefined)\n        newProfile.set(null)\n    }\n\n    onDestroy(unsubscribe)\n\n    function handleMigrateClick() {\n        if (legacyLedger) {\n            const _onConnected = () => migrateFunds()\n            promptUserToConnectLedger(true, _onConnected)\n        } else {\n            migrateFunds()\n        }\n    }\n\n    function migrateFunds() {\n        migratingFundsMessage = locale('views.migrate.migrating')\n\n        transactions.reduce(\n            (promise, transaction, idx) =>\n                // @ts-ignore\n                promise\n                    .then((acc) => {\n                        if (legacyLedger) {\n                            if (transaction.trytes && transaction.trytes.length) {\n                                return Electron.ledger\n                                    .selectSeed($hardwareIndexes.accountIndex, $hardwareIndexes.pageIndex, ADDRESS_SECURITY_LEVEL)\n                                    .then(({ iota, callback }) => {\n                                        closeTransport = callback\n                                        return createMinedLedgerMigrationBundle(\n                                            transaction.index,\n                                            iota.prepareTransfers,\n                                            callback\n                                        )\n                                    })\n                                    .then(({ trytes, bundleHash }) => {\n                                        closePopup(true) // close transaction popup\n                                        setMigratingTransaction(transaction, 1)\n                                        transactions = transactions.map((_transaction, i) => {\n                                            if (_transaction.index === transaction.index) {\n                                                return { ..._transaction, bundleHash }\n                                            }\n\n                                            return _transaction\n                                        })\n\n                                        return sendLedgerMigrationBundle(bundleHash, trytes)\n                                    })\n                                    .then(() => {\n                                        if (!hasBroadcastAnyBundle) {\n                                            hasBroadcastAnyBundle = true\n\n                                            persistProfile()\n                                        }\n\n                                        migratedAndUnconfirmedBundles = [...migratedAndUnconfirmedBundles, transaction.bundleHash]\n                                    })\n                            }\n\n                            return Electron.ledger\n                                .selectSeed($hardwareIndexes.accountIndex, $hardwareIndexes.pageIndex, ADDRESS_SECURITY_LEVEL)\n                                .then(({ iota, callback }) => {\n                                    closeTransport = callback\n                                    return createLedgerMigrationBundle(transaction.index, iota.prepareTransfers, callback)\n                                })\n                                .then(({ trytes, bundleHash }) => {\n                                    closePopup(true) // close transaction popup\n                                    setMigratingTransaction(transaction, 1)\n                                    transactions = transactions.map((_transaction, i) => {\n                                        if (_transaction.index === transaction.index) {\n                                            return { ..._transaction, bundleHash }\n                                        }\n\n                                        return _transaction\n                                    })\n\n                                    return sendLedgerMigrationBundle(bundleHash, trytes).then(() => {\n                                        if (!hasBroadcastAnyBundle) {\n                                            hasBroadcastAnyBundle = true\n\n                                            persistProfile()\n                                        }\n\n                                        migratedAndUnconfirmedBundles = [...migratedAndUnconfirmedBundles, bundleHash]\n                                    })\n                                })\n                        }\n\n                        if (transaction.bundleHash) {\n                            setMigratingTransaction(transaction, 1)\n                            return sendMigrationBundle(transaction.bundleHash).then(() => {\n                                if (!hasBroadcastAnyBundle) {\n                                    hasBroadcastAnyBundle = true\n\n                                    persistProfile()\n                                }\n\n                                migratedAndUnconfirmedBundles = [...migratedAndUnconfirmedBundles, transaction.bundleHash]\n                            })\n                        }\n\n                        return createMigrationBundle(getInputIndexesForBundle(transaction), 0, false).then((result) => {\n                            setMigratingTransaction(transaction, 1)\n                            transactions = transactions.map((_transaction, i) => {\n                                if (_transaction.index === transaction.index) {\n                                    return { ..._transaction, bundleHash: result.bundleHash }\n                                }\n\n                                return _transaction\n                            })\n\n                            return sendMigrationBundle(result.bundleHash).then(() => {\n                                if (!hasBroadcastAnyBundle) {\n                                    hasBroadcastAnyBundle = true\n\n                                    persistProfile()\n                                }\n\n                                migratedAndUnconfirmedBundles = [...migratedAndUnconfirmedBundles, result.bundleHash]\n                            })\n                        })\n                    })\n                    .catch((error) => {\n                        console.error(error)\n\n                        if (legacyLedger) {\n                            closePopup(true) // close transaction popup\n                            closeTransport()\n                            displayNotificationForLedgerProfile('error', false, true, false, true, error)\n                        }\n\n                        transactions = transactions.map((_transaction, i) => {\n                            if (_transaction.index === transaction.index) {\n                                return { ..._transaction, status: -1, errorText: 'Migration failed' }\n                            }\n\n                            return _transaction\n                        })\n\n                        if (\n                            idx === transactions.length - 1 &&\n                            transactions.every((tx) => tx.status !== 0)\n                        ) {\n                            migrated = true\n                            busy = false\n                        }\n                    }),\n            Promise.resolve([])\n        )\n    }\n</script>\n\n{#if mobile}\n    <div>foo</div>\n{:else}\n    <OnboardingLayout\n        allowBack={!$hasMigratedAnyBundle && !busy}\n        {locale}\n        onBackClick={handleBackClick}\n        class=\"\"\n        showLedgerProgress={legacyLedger}\n        showLedgerVideoButton={legacyLedger}>\n        <div slot=\"leftpane__content\" class=\"h-full flex flex-col flex-wrap\">\n            <Text type=\"h2\" classes=\"mb-5\">{locale('views.migrate.title')}</Text>\n            <Text type=\"p\" secondary classes=\"mb-4\">{locale('views.transferFragmentedFunds.body1')}</Text>\n            {#if legacyLedger}\n                <Text type=\"p\" secondary classes=\"mb-4\">\n                    {locale('views.transferFragmentedFunds.body2', { values: { legacy: LedgerAppName.IOTALegacy } })}\n                </Text>\n            {/if}\n            <div class=\"flex-auto overflow-y-auto h-1 space-y-4 w-full scrollable-y scroll-secondary\">\n                {#each transactions as transaction}\n                    <TransactionItem {...transaction} {locale} />\n                {/each}\n            </div>\n        </div>\n        <div slot=\"leftpane__action\" class=\"flex flex-col items-center space-y-4\">\n            {#if !migrated}\n                <Button\n                    disabled={busy}\n                    classes=\"w-full py-3 mt-2 text-white {$popupState.active && 'opacity-20'}\"\n                    onClick={() => handleMigrateClick()}>\n                    {#if !busy}\n                        {locale('views.transferFragmentedFunds.migrate')}\n                    {:else}\n                        <Spinner {busy} message={migratingFundsMessage} classes=\"justify-center\" />\n                    {/if}\n                </Button>\n            {:else if fullSuccess}\n                <Button classes=\"w-full py-3 mt-2\" onClick={() => handleContinueClick()}>{locale('actions.continue')}</Button>\n            {:else}\n                <Button classes=\"w-full py-3 mt-2 {$popupState.active && 'opacity-20'}\" onClick={() => handleRerunClick()}>\n                    {locale('views.transferFragmentedFunds.rerun')}\n                </Button>\n            {/if}\n        </div>\n        <div slot=\"rightpane\" class=\"w-full h-full flex justify-center bg-pastel-blue dark:bg-gray-900\">\n            <Animation {animation} />\n        </div>\n    </OnboardingLayout>\n{/if}\n","/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/migrate/views/index.js",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/protect/Protect.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/protect/views/Pin.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/protect/views/Protect.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/protect/views/RepeatPin.svelte",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/routes/setup/protect/views/index.js",[],"/Users/maxwellmattryan/dev/iota/repos/firefly/packages/shared/tailwind.config.js",[],{"ruleId":"1035","severity":1,"message":"1036","line":62,"column":1,"nodeType":"1037","messageId":"1038","endLine":62,"endColumn":14},{"ruleId":"1035","severity":1,"message":"1036","line":95,"column":13,"nodeType":"1037","messageId":"1038","endLine":95,"endColumn":26},{"ruleId":"1035","severity":1,"message":"1036","line":67,"column":9,"nodeType":"1037","messageId":"1038","endLine":67,"endColumn":70},{"ruleId":"1039","severity":2,"message":"1040","line":7,"column":22,"nodeType":"1041","messageId":"1042","endLine":7,"endColumn":23},{"ruleId":"1043","severity":1,"message":"1044","line":133,"column":9,"endLine":133,"endColumn":18},{"ruleId":"1035","severity":1,"message":"1036","line":27,"column":9,"nodeType":"1037","messageId":"1038","endLine":27,"endColumn":70},{"ruleId":"1035","severity":1,"message":"1036","line":403,"column":13,"nodeType":"1037","messageId":"1038","endLine":403,"endColumn":26},{"ruleId":"1035","severity":1,"message":"1036","line":1239,"column":29,"nodeType":"1037","messageId":"1038","endLine":1239,"endColumn":42},{"ruleId":"1035","severity":1,"message":"1036","line":146,"column":17,"nodeType":"1037","messageId":"1038","endLine":146,"endColumn":30},{"ruleId":"1035","severity":1,"message":"1036","line":280,"column":17,"nodeType":"1037","messageId":"1038","endLine":280,"endColumn":30},"@typescript-eslint/ban-ts-comment","Do not use \"@ts-ignore\" because it alters compilation errors.","Line","tsDirectiveComment","no-irregular-whitespace","Irregular whitespace not allowed.","Program","noIrregularWhitespace","a11y-autofocus","A11y: Avoid using autofocus"]