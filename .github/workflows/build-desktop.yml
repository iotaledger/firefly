name: Build Firefly Desktop

on:
  workflow_dispatch:
    inputs:
      debugElectronBuilder:
        description: "Verbose electron-builder output"     
        required: true
        default: "false"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false
    env:
      OPENSSL_LINK_STATIC: true

    steps:
    - uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v1
      with:
        node-version: 12.x

    - name: Set up Python 2.x
      uses: actions/setup-python@v2
      with:
        python-version: '2.x'

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal

    - name: Install required packages (Linux)
      run: |
        sudo apt update
        sudo apt install -y gcc-multilib g++-multilib build-essential libssl-dev rpm libsecret-1-dev \
          software-properties-common apt-transport-https libudev-dev libusb-1.0-0-dev \
          llvm-dev libclang-dev clang
      if: matrix.os == 'ubuntu-latest'

    # paho.mqtt requires openssl and OPENSSL_ROOT_DIR on macOS
    - name: Set OpenSSL location (macOS)
      if: matrix.os == 'macos-latest'
      run: echo "OPENSSL_ROOT_DIR=$(brew --prefix openssl@1.1)" >> $GITHUB_ENV
    
    - name: Set OpenSSL location (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: echo "RUSTFLAGS=-L /usr/lib/x86_64-linux-gnu" >> $GITHUB_ENV
    
    # paho.mqtt requires openssl and OPENSSL_ROOT_DIR on Windows
    # Prebuilt OpenSSL 1.1.1g from https://github.com/microsoft/vcpkg/releases/tag/2020.11
    - name: Install OpenSSL (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        $ProgressPreference = 'SilentlyContinue'
        Invoke-WebRequest https://iotaledger-files.s3.eu-central-1.amazonaws.com/prebuild/openssl/windows/vcpkg-export-openssl-1.1.1g.zip -OutFile openssl.zip
        Expand-Archive openssl.zip
        Remove-Item openssl.zip
        echo "OPENSSL_ROOT_DIR=${{ github.workspace }}/openssl/installed/x64-windows-static" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    - name: Enable verbose output for electron-builder (macOS/Linux)
      run: echo "DEBUG=electron-builder" >> $GITHUB_ENV
      if: matrix.os != 'windows-latest' && github.event.inputs.debugElectronBuilder && github.event.inputs.debugElectronBuilder == 'true'

    - name: Enable verbose output for electron-builder (Windows)
      run: echo "DEBUG=electron-builder" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      if: matrix.os == 'windows-latest' && github.event.inputs.debugElectronBuilder && github.event.inputs.debugElectronBuilder == 'true'

    - name: Install dependencies
      run: yarn

    - name: Bundle desktop JS
      run: yarn build
      working-directory: packages/desktop

    - name: Build Electron app (macOS)
      run: yarn compile:mac
      env:
        CSC_LINK: ${{ secrets.MAC_CERT_BASE64 }}
        CSC_KEY_PASSWORD: ${{ secrets.MAC_CERT_PASSWORD }}
        FIREFLY_APPLE_ID: ${{ secrets.APPLE_ID }}
        FIREFLY_APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
      working-directory: packages/desktop
      if: matrix.os == 'macos-latest'

    - name: Build Electron app (Windows)
      run: yarn compile:win
      env:
        CSC_LINK: ${{ secrets.WIN_CERT_BASE64 }}
        CSC_KEY_PASSWORD: ${{ secrets.WIN_CERT_PASSWORD }}
      working-directory: packages/desktop
      if: matrix.os == 'windows-latest'

    - name: Build Electron app (Linux)
      run: yarn compile:linux
      working-directory: packages/desktop
      if: matrix.os == 'ubuntu-latest'

    - name: Compute checksums (Linux)
      run: for i in `ls | grep 'trinity-desktop*'` ; do sha256sum $i | awk {'print $1'} > $i.sha256 ; done
      working-directory: packages/desktop/out
      if: matrix.os == 'ubuntu-latest'

    - name: Compute checksums (macOS)
      run: for i in `ls | grep 'trinity-desktop*'` ; do shasum -a 256 $i | awk {'print $1'} > $i.sha256 ; done
      working-directory: packages/desktop/out
      if: matrix.os == 'macos-latest'

    - name: Compute checksums (Windows)
      run: Get-ChildItem "." -Filter trinity-desktop* | Foreach-Object { $(Get-FileHash -Path $_.FullName -Algorithm SHA256).Hash | Set-Content ($_.FullName + '.sha256') }
      working-directory: packages/desktop/out
      if: matrix.os == 'windows-latest'

    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: firefly-desktop-${{ matrix.os }}
        path: |
          packages/desktop/out/firefly-desktop*
          packages/desktop/out/latest*
