name: Build and Release Desktop

on:
    push:
        tags:
            - desktop-*
    workflow_dispatch:
        inputs:
            debugElectronBuilder:
                description: 'Verbose electron-builder output'
                required: true
                default: 'false'
            stage:
                description: 'Stage (alpha, beta, or prod)'
                required: true
                default: 'prod'

jobs:
    setup:
        runs-on: ubuntu-latest
        if: startsWith(github.ref, 'refs/tags/desktop')
        outputs:
            version: ${{ steps.set_outputs.outputs.version }}
            release_name: ${{ steps.set_outputs.outputs.release_name }}
            stage: ${{ steps.set_outputs.outputs.stage }}

        steps:
            - id: set_outputs
              name: Set outputs for version, release name, and stage
              run: |
                  VERSION=${GITHUB_REF#refs/*/desktop-}
                  RELEASE_NAME=$(echo $VERSION | perl -0777 -pe 's/^([0-9]\d*\.[0-9]\d*\.[0-9]\d*)(?:-([a-z]*)-(\d*))?$/$1 \u$2 $3/')
                  STAGE=$(echo $VERSION | perl -0777 -pe 's/^([0-9]\d*\.[0-9]\d*\.[0-9]\d*)(?:-([a-z]*)-([0-9]\d*(\.[0-9]\d*)*))?$/$2/')

                  if [ -z "$STAGE" ]; then
                    STAGE="prod"
                  fi

                  echo "version=$VERSION" >> $GITHUB_OUTPUT
                  echo "release_name=$RELEASE_NAME" >> $GITHUB_OUTPUT
                  echo "stage=$STAGE" >> $GITHUB_OUTPUT

    build:
        runs-on: ${{ matrix.os }}
        if: ${{ always() }}
        needs: [setup]
        strategy:
            matrix:
                os: [ubuntu-20.04, macos-11, windows-2019]
            fail-fast: true
        uses: ./.github/workflows/build-desktop-for-os.yml
        with:
            debugElectronBuilder: inputs.debugElectronBuilder
            stage: inputs.stage
            os: inputs.os


    release:
        runs-on: ubuntu-latest
        needs: [setup, build]
        if: startsWith(github.ref, 'refs/tags/desktop')
        env:
            VERSION: ${{ needs.setup.outputs.version }}
            RELEASE_NAME: ${{ needs.setup.outputs.release_name }}
            STAGE: ${{ needs.setup.outputs.stage }}

        steps:
            - run: echo ${{ github.ref }}

            - name: Checkout code
              uses: actions/checkout@v2

            - name: Downloading artifacts
              uses: actions/download-artifact@v2
              with:
                  name: firefly-desktop-windows-2019
                  path: assets

            - name: Downloading artifacts
              uses: actions/download-artifact@v2
              with:
                  name: firefly-desktop-macos-11
                  path: assets

            - name: Downloading artifacts
              uses: actions/download-artifact@v2
              with:
                  name: firefly-desktop-ubuntu-20.04
                  path: assets

            - name: Preparing release body
              run: |
                  sed -i 's/\r$//' ../../assets/*.sha256 && sed -i '/^$/d' ../../assets/*.sha256 && sed -i -e 's/\(.*\)/\L\1/' ../../assets/*.sha256
                  WIN_SHA256=$(cat ../../assets/firefly-desktop-${{ env.VERSION }}.exe.sha256)
                  LIN_SHA256=$(cat ../../assets/firefly-desktop-${{ env.VERSION }}.AppImage.sha256)
                  MAC_SHA256=$(cat ../../assets/firefly-desktop-${{ env.VERSION }}.dmg.sha256)
                  echo $WIN_SHA256 $LIN_SHA256 $MAC_SHA256
                  touch CHANGELOG.md
                  echo '### Changelog' >> CHANGELOG.md
                  echo '------' >> CHANGELOG.md
                  echo '### File Hashes' >> CHANGELOG.md
                  echo '[How to verify the authenticity of your Firefly Desktop download](https://wiki.iota.org/shimmer/introduction/how_tos/verify_download/#verify-your-firefly-desktop-download)' >> CHANGELOG.md
                  echo '| File | Platform | SHA256 Hash |' >> CHANGELOG.md
                  echo '| --- | --- | --- |' >> CHANGELOG.md
                  echo '| firefly-desktop-${{ env.VERSION }}.exe | Windows |' $WIN_SHA256 '|' >> CHANGELOG.md
                  echo '| firefly-desktop-${{ env.VERSION }}.AppImage | Linux |' $LIN_SHA256 '|' >> CHANGELOG.md
                  echo '| firefly-desktop-${{ env.VERSION }}.dmg | MacOS | ' $MAC_SHA256 '|' >> CHANGELOG.md
                  cat CHANGELOG.md
              working-directory: packages/desktop

            - name: Create Release
              id: create_release
              uses: actions/create-release@v1.1.2
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  tag_name: ${{ github.ref }}
                  release_name: Firefly Desktop ${{ env.RELEASE_NAME }}
                  body_path: packages/desktop/CHANGELOG.md
                  draft: true
                  prerelease: true

            - name: Upload macOS binary asset
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }}
                  asset_path: assets/firefly-desktop-${{ env.VERSION }}.dmg
                  asset_name: firefly-desktop-${{ env.VERSION }}.dmg
                  asset_content_type: application/octet-stream

            - name: Upload Windows binary asset
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }}
                  asset_path: assets/firefly-desktop-${{ env.VERSION }}.exe
                  asset_name: firefly-desktop-${{ env.VERSION }}.exe
                  asset_content_type: application/octet-stream

            - name: Upload Linux binary asset
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }}
                  asset_path: assets/firefly-desktop-${{ env.VERSION }}.AppImage
                  asset_name: firefly-desktop-${{ env.VERSION }}.AppImage
                  asset_content_type: application/octet-stream

            - name: Upload Linux code signature asset
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }}
                  asset_path: assets/firefly-desktop-${{ env.VERSION }}.AppImage.asc
                  asset_name: firefly-desktop-${{ env.VERSION }}.AppImage.asc
                  asset_content_type: application/pgp-signature

            - name: Listing artifacts
              run: ls -al assets

            - name: Upload to S3
              run: |
                  aws s3 cp assets/ s3://iotaledger-files/4a1ddea1-10c1-4f1d-83f0-e14903931a46/releases/ --recursive --include "*" --exclude "*.sha256" --exclude "*.blockmap" --exclude "*.asc" --acl public-read
                  aws s3 cp assets/ s3://iotaledger-files/firefly/releases/ --recursive --include "*" --exclude "*.sha256" --exclude "*.blockmap" --exclude "*.asc" --acl public-read
              env:
                  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  AWS_DEFAULT_REGION: eu-central-1

            - name: Invalidate CloudFront cache for auto-update files
              run: aws cloudfront create-invalidation --distribution-id E32G4HRED4PO65 --paths "/shimmer*"
              env:
                  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  AWS_DEFAULT_REGION: eu-central-1
